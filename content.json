{"meta":{"title":"BLog for Haoyv","subtitle":"简单记录学习日常","description":"","author":"Haoyv","url":"http://Hao-yv.github.io","root":"/"},"pages":[{"title":"关于","date":"2024-02-13T16:00:00.000Z","updated":"2024-02-14T04:08:59.068Z","comments":false,"path":"about/index.html","permalink":"http://hao-yv.github.io/about/index.html","excerpt":"","text":"关于我我是一个在命运长河里挣扎的小鱼，00后，目前是小白一枚。虽然心中不甘，但是目前确实是 Worst One 。目标是成为全栈工程师、系统架构师。虽然前路迷茫，但是我会一步一步往前走。"},{"title":"留言板","date":"2024-02-13T16:00:00.000Z","updated":"2024-02-14T03:57:44.582Z","comments":true,"path":"comment/index.html","permalink":"http://hao-yv.github.io/comment/index.html","excerpt":"","text":""},{"title":"归档","date":"2024-02-13T16:00:00.000Z","updated":"2024-02-14T08:34:49.007Z","comments":true,"path":"archive/index.html","permalink":"http://hao-yv.github.io/archive/index.html","excerpt":"","text":""},{"title":"分类","date":"2024-02-13T16:00:00.000Z","updated":"2024-02-14T03:58:01.402Z","comments":true,"path":"category/index.html","permalink":"http://hao-yv.github.io/category/index.html","excerpt":"","text":""},{"title":"赞赏","date":"2024-02-13T16:00:00.000Z","updated":"2024-02-14T03:58:54.964Z","comments":false,"path":"donate/index.html","permalink":"http://hao-yv.github.io/donate/index.html","excerpt":"","text":"如果喜欢我的博客，或者喜欢我的博客主题，可以考虑赞赏一下哦，非常感激！网站所需的服务器和 CDN 都是不小的开支，日常维护也需要大量精力。 你们的支持是我前进的最大动力！"},{"title":"友情链接","date":"2019-12-31T16:00:00.000Z","updated":"2024-02-14T03:49:25.734Z","comments":false,"path":"friend/index.html","permalink":"http://hao-yv.github.io/friend/index.html","excerpt":"","text":"欢迎各位朋友前来交换友链，本站友链接受以下类型的网站： 个人博客 公益组织等非盈利性网站 不接受广告、商业性网站，特殊情况除外 如果你的网站 一个月以上无法正常访问 将会被移除。"},{"title":"标签","date":"2019-12-31T16:00:00.000Z","updated":"2024-02-14T03:49:25.740Z","comments":true,"path":"tag/index.html","permalink":"http://hao-yv.github.io/tag/index.html","excerpt":"","text":""}],"posts":[{"title":"wen11专业版重置系统后安全中心无法打开处理方法","slug":"win11专业版重置系统后安全中心无法打开","date":"2024-10-01T07:02:40.569Z","updated":"2024-10-03T14:47:54.635Z","comments":true,"path":"article/90881e5b/","link":"","permalink":"http://hao-yv.github.io/article/90881e5b/","excerpt":"","text":"在win11专业版系统重装的情况下打开安全中心时，可能会弹出“页面不可用”的弹框（如下图所示），这时由于win11专业版本身并没有安全中心这一功能，在系统重置时原有的安全中心被删除。可通过手动重装安全中心的方式解决 通过键盘 win + r打开windows系统的运行窗口,输入winver查看并记住当前系统版本号 进入UUP dump网站 ，选在你电脑的系统版本号（以 23H2版本为例子） 选中后进入以下界面： 点击对应版本号进入跳转页面后在搜索文件中输入Microsoft.SecHealthUI_8wekyb3d8bbwe.appx 之后点击搜索，并下载对应文件 文件下载时，可能会提示文件无法下载，此时可点击下载旁边的三个点，点击保留，选择仍然保留 下载成功后，为下载文件重命名，添加尾缀.appx，随后双击打开，点击重新安装，重新安装后即可打开安全中心","categories":[{"name":"文档","slug":"文档","permalink":"http://hao-yv.github.io/category/%E6%96%87%E6%A1%A3/"}],"tags":[{"name":"文档","slug":"文档","permalink":"http://hao-yv.github.io/tag/%E6%96%87%E6%A1%A3/"}]},{"title":"软件工程","slug":"软件工程","date":"2024-07-01T02:37:06.194Z","updated":"2024-07-01T02:52:57.563Z","comments":true,"path":"article/7821ac43/","link":"","permalink":"http://hao-yv.github.io/article/7821ac43/","excerpt":"","text":"软件工程名词解释软件工程：采用工程的概念、技术、原理和方法来开发与维护软件，以经济地开发出高质量的软件并有效地维护它软件可靠性：软件产品在规定的条件下和规定的时间区间完成规定功能的能力软件维护：对已经开发完成的软件进行修改，更新，优化和修复等工作的过程内聚和耦合：内聚标志着模块内各个元素 彼此结合的紧密程度；耦合是软件节后内不同模块之间互联程度的度量面向对象的消息：在面向对象编程中，对象之间通过消息来进行通信的一种方式数据字典：描述数据的信息集合，是对系统中使用的所有数据元素的定义的集合软件测试：软件投入运行前，对软件需求分析、设计规格说明和编码的最终复查信息隐藏：设计和确定模块时，使得一个模块内包含的信息（过程和数据）对于不需要这些信息的模块来说是不能访问的CMM：CMM是对于软件组织在定义、实施、度量、控制和改善其软件过程的实践中各个发展阶段的描述软件：是计算机系统中与硬件相互依存的另一部分，包括程序、数据及其文档的完整集合面向对象方法学：面向对象方法是一种以数据或信息为主线，把数据和处理相结合的方法，即把对象作为由数据及可以施加在这些数据上的操作所构成的统一体软件过程：形成软件产品的一系列步骤，包括中间产品、资源、角色及过程中采取的方法、工具等范畴软件配置项：软件产品开发和维护过程中所有有贡献的项 简述题简述结构化范型和面向对象范型的要点，并分析他们的优缺点。结构化范型要点：采用生命周期方法学，以瀑布模型为主，强调各阶段任务独立、简单，易于分工协作。优点：简化问题难度，程序简洁明了；缺点：处理复杂问题有限制，不利于维护。面向对象范型要点：基于对象概念，将数据和操作封装在对象中，通过类和继承实现代码重用和扩展。优点：思维符合人类习惯，易于理解和维护，可靠性高；缺点：对开发人员抽象能力要求高，模块划分不合理会影响功能。 简述决定软件可维护性的因素及为提高可维护性应该采取的措施。 可理解性、可复用性、可修改性、可测试性、稳定性、可扩展性、文档完善性 遵循编码规范，保持代码整洁。 使用清晰的命名和注释。 采用模块化和面向对象设计。 减少代码重复，提取公共逻辑。 编写自动化测试。 维护详尽的文档。 定期进行代码审查。 简述软件工程的定义及软件工程的基本原理 软件工程是指导计算机软件开发和维护的一门工程学科，采用工程的概念、原理、技术和方法来开发和与维护软件，把经过实践考验而证明正确的管理技术和当前能够得到最好的方法结合起来，以经济地开发出高质量的软件并有效维护 用分阶段的生命周期计划严格管理坚持进行阶段评审实行产品控制采用现代程序设计技术结果应能够清楚地审查开发人员应少而精承认不断改进软件工程实践的必要性 可行性研究的过程包括哪些主要步骤 复查系统规模和目标 研究目前正在使用的系统 导出新系统的高层逻辑模型 进一步定问题 导出和评价供选择的解法 推荐行动方针 草拟开发计划 书写文档提交审查 简述软件维护的定义及维护的类型 软件维护是在软件已经交付使用后，为了改正错误或满足新的需要而修改软件的过程，是软件生命周期的最后一个阶段，其基本任务是保证软件在一个相当长的时期能够正常运行 改正性维护适应性维护完善性维护预防性维护 简述软件工程中数据流图和数据字典的作用数据流图（DFD）用于描述系统内数据流动、处理和存储的逻辑模型，通过图形化方式展示系统功能过程和数据流向。数据字典（DD）提供系统中使用的数据元素的详细定义和描述，包括数据项、数据属性、数据类型等，是集中的结构化文档或数据库。两者共同构成系统逻辑模型，提高可维护性 为什么要进行需求分析？需求分析对软件系统有哪些综合要求 为了发现系统中可能存在的问题，以及确定系统必须完成的工作 功能需求、性能需求、可靠性需求、出错处理需求、接口需求、约束、逆向需求、未来可能提出的需求（功、性、靠、出、口、束、逆、来） 简述软件工程中数据流图和数据字典的作用数据流图（DFD）用于表示数据流向和系统组件，数据字典（DD）定义数据元素并规范，共同构成系统的逻辑模型，二者缺一不可 简述面向对象设计的启发规则 设计结果应清晰易懂 一般-特殊结构的深度应当适当 设计简单的类 使用简单的协议 使用简单的服务 把设计变动减至最小 简述模块独立性的概念及度量模块独立性的标准 模块独立性是指每个模块只完成系统要求的独立子功能，并且与其他模块的联系最少且接口最简单 衡量模块独立性的标准是耦合性和内聚性（高内聚低耦合） 简述大型软件系统的测试过程的基本步骤 模块测试 子系统测试 系统测试 验收测试 平行测试 简述系统总体设计中的启发式规则 要提高软件的模块独立性 模块规则不宜过大 深度、宽度、扇入、扇出都应适当 作用域要在控制域内 要降低模块接口的复杂度 设计单入单出的模块 模块的功能要可预测，同时避免功能过分局限 简述软件需求分析阶段从哪些方面验证软件需求的正确性 需求是否和用户所描述一致 需求是否获取完整 需求是否现实 需求是否有效解决客户问题 需求是否可以检验（一、完、有、现、可）","categories":[{"name":"软件工程","slug":"软件工程","permalink":"http://hao-yv.github.io/category/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"}],"tags":[{"name":"文档","slug":"文档","permalink":"http://hao-yv.github.io/tag/%E6%96%87%E6%A1%A3/"}],"author":null},{"title":"操作系统","slug":"操作系统","date":"2024-07-01T02:35:43.640Z","updated":"2024-07-01T03:16:27.649Z","comments":true,"path":"article/d04bd5bc/","link":"","permalink":"http://hao-yv.github.io/article/d04bd5bc/","excerpt":"","text":"操作系统简答部分进程转换图 进程调度算法及思想 先来先服务算法（FCFS） 算法思想：从公平角度考虑，按照进程到达的先后顺序进行调度 短作业优先算法（SJF） 算法思想：使要求服务时间最短的进程优先得到服务，追求最少的平均等待时间，最少周转时间和最少平均带权周转时间 高xiang y比优先算法（HRRN） 算法思想：综合考虑进程的等待时间，每次进行调度时，先计算各个进程的相应比，选择相应比高的进程为其服务 用户程序处理三阶段 编译：将用户源代码编译成若干目标模块 链接：将编译后形成的目标代码及他们所需库函数连接在一起，形成一个装入模块 装入：由装入程序将装入模块装入内存 用户文件按照用途分类 系统文件 库文件 用户文件 常用动态分区分配算法 首次适应算法 最佳适应算法 最坏适应算法 临近适应算法 公共缓冲池中缓冲区4种工作方式 收容输入 提取输入 收容输出 提取输出 具有挂起状态的进程转换图 目标程序装入内存的方式 绝对装入 可重定位装入 动态运行时装入 文件共享保护机制 口令保护：要求用户在访问文件时必须提供口令 密码保护：文件进行加密，在访问时需要提供正确的密码才能对文件进行正确的解密 访问控制：在每个文件的FCB中增加一个访问控制表ACL，记录各个用户可对该文件执行哪些操作 死锁产生必要条件 互斥条件 不可剥夺条件 请求和保持条件 循环等待条件 磁盘调度算法 先来先服务算法 最短寻道时间优先算法 电梯算法 循环扫描算法 进程基本状态及其转换关系进程基本状态：就绪态、阻塞态、执行态 处于就绪态的进程，当调度程序为其分配处理机后，变为执行态 处于执行态的进程，当系统为其分配的时间片用完后推出处理机，变为就绪态 处于执行态的进程，当其有用某种原因无法继续执行时，变为阻塞态 处于阻塞态的进程，当其等待事件完毕后，变为就绪态 程序链接方式 静态链接 装入时动态链接 运行时动态链接 死锁检测时发生死锁的检测方式 资源剥夺法 撤销进程法 进程回退法 操作系统为用户提供的接口 命令行接口 图形界面接口 应用程序编程接口 名词解释对换：系统把所有用户作业放入磁盘，每次只能调用一个作业到内存，作业完成时调至外存，再将外存的另一个作业调入作业：用户在一次解题或一个事物处理过程中要求计算机所做所有工作的集合缓冲区：指通信双方不直接通信，而是通过一个缓冲器中转批处理系统：用户将作业提交给操作系统后不再干预，由操作系统控制他们自己运行虚拟存储器：具有请求调出功能和置换功能，并能从逻辑上对空间进行扩容实时操作系统：对信息进行实时处理的系统原语：由若干条指令组成的程序段，用来实现某个功能，在程序执行过程中不可被中断处理机调度：从就绪队列中按照一定算法选择一个进程，并将处理机分配给它运行进程并发性：两个或多个事件在同一时间间隔内发生，这些事件在宏观上同时发生，但在微观上是交替发生的文件控制块：操作系统为管理文件而设置的一组具有固定格式的数据结构，存放管理文件所需的所有属性信息信号量：也叫做信号灯，它是在信号量同步机制中用于实现进程的同步和互斥的有效数据结构重定位：链接地址跟运行地址不同的情况下，执行一段位置无关码","categories":[{"name":"操作系统","slug":"操作系统","permalink":"http://hao-yv.github.io/category/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"文档","slug":"文档","permalink":"http://hao-yv.github.io/tag/%E6%96%87%E6%A1%A3/"}],"author":null},{"title":"HTML文档","slug":"HTML文档","date":"2024-03-18T00:27:24.857Z","updated":"2024-04-02T15:32:50.332Z","comments":true,"path":"article/cb13802c/","link":"","permalink":"http://hao-yv.github.io/article/cb13802c/","excerpt":"","text":"HTML文档1. HTML语法规范1.1 基本语法概述 HTML标签是由尖括号包围的关键词 HTML标签通常成对出现，例如 &lt;html&gt; 和 &lt;\\html&gt;，称为双标签，其中第一个为开始标签，第二个为结束标签 有些特殊标签必须是单个标签（极少情况），如 &lt;br&gt;，称为单标签 1.2 标签关系标签分为两类，分别为并列关系和包含关系 包含关系： 123&lt;head&gt; &lt;title&gt; &lt;/title&gt;&lt;/head&gt; 并列关系： 12&lt;head&gt; &lt;/head&gt;&lt;body&gt; &lt;/body&gt; 2 HTML 基本结构标签2.1 第一个HTML 标签名 定义 说明 &lt;html&gt; &lt;&#x2F;html&gt; HTML标签 页面中最大的标签，称为 根标签 &lt;head&gt; &lt;&#x2F;head&gt; 文档的头部 在head标签中必须要设置title标签 &lt;title&gt; &lt;&#x2F;title&gt; 文档的标题 让页面拥有一个属于自己的网页标题 &lt;body&gt; &lt;&#x2F;body&gt; 文档的主体 元素包含文档的所有内容，页面内容基本都是放到 body标签 里面 3 网页开发工具3.1 文档类型声明标签&lt;!DOCTYPE&gt; 文档转换声明，作用是告诉浏览器用哪种版本的HTML来显示网页 1&lt;!DOCTYPE html&gt; 注意： &lt;!DOCTYPE&gt; 声明位于文档中的最前面位置，处于 &lt;html&gt; &lt;!DOCTYPE&gt;不是一个HTML标签，是文档类型声明标签 3.2 lang 语言种类用来定义当前文档显示语言 en定义语言为英语 zh-CN定义语言为中文对于文档显示来说，定义成en可以显示中文，定义成zh-CN也可以显示英文 3.3 字符集字符集（Character set）是多个字符的集合，以便计算机能够识别和存储各种文字。在 &lt;head&gt; 标签内，可以通过 &lt;meta&gt; 标签的 charset 属性来规定HTML文档应该使用哪种文字编码 1&lt;meta charset=&quot;UTF-8&quot;&gt; charset常有的值有: GB2312、BIG5、GBK 和 UTF-8，其中UTF-8也被称为万国码，基本包含了全世界所有国家常用的字符 注意：一般情况下，统一使用”UTF-8”编码，尽量写成标准的”UTF-8”,不要写成 “utf8” 或 “UTF8” 4. HTML 常用标签4.1 标题标签(&lt;h1&gt; - &lt;h6&gt;)为了使网页更具有语义化，经常在页面中用到标题标签，HTML 提供了6个等级的网页标题，即&lt;h1&gt; ~ &lt;h6&gt; 1234&lt;h1&gt;一级标题&lt;/h1&gt; &lt;h2&gt;二级标题&lt;/h2&gt; ... &lt;h6&gt;六级标题&lt;/h6&gt; h为单词 head 的缩写，意味头部，标题 标签语义：作用为标题使用，并且依次根据重要性递减 特点： 加了标题的文字会变得加粗，字号也会依次变大 一个标题独占一行 4.2 段落和换行标签在网页中，要把文字有条理地显示出来，就要将这些文字分段。在 HTML 标签中，&lt;p&gt; 标签用于定义段落，它可以将整个网页分为若干短路 1&lt;p&gt;段落标签&lt;/p&gt; 单词 paragraph 的缩写，意味 段落标签语义：可以把 HTML 文档分割为若干段落 特点： 文本在一个段落中会根据浏览器自动换行 段落和段落之间保有空隙 在HTML中，一个段落中的文字会从左到右排列直到浏览器窗口右端，然后才自动换行，如果需要某段文本强制换行，就需要&lt;br&gt; 1&lt;br&gt; 单词：break的缩写，意为打断，换行标签语义：强制换行 特点： &lt;br&gt;是个单标签 &lt;br&gt;标签只是签单地开启新的一行，和段落不同，段落之间会插入一些垂直行距 4.3 文本格式化标签在网页中，有时需要为文字设置 粗体，斜体 或 下划线 效果,这时就需要用到HTML中的文本化标签，使用以特殊的方式显示 标签语义：突出重要性，比普通文字更重要 语义 标签 说明 加粗 &lt;strong&gt; &lt;&#x2F;strong&gt;或者&lt;b&gt; &lt;&#x2F;b&gt; 更推荐用&lt;strong&gt;标签 语义更强烈 倾斜 &lt;em&gt; &lt;&#x2F;em&gt; 或者 &lt;i&gt; &lt;&#x2F;i&gt; 更推荐用 &lt;em&gt; 标签，语义更强烈 删除线 &lt;del&gt; &lt;&#x2F;del&gt;或者 &lt;s&gt; &lt;&#x2F;s&gt; 更推荐用&lt;del&gt;标签，语义更强烈 下划线 &lt;ins&gt; &lt;&#x2F;ins&gt;或者&lt;u&gt; &lt;&#x2F;u&gt; 更推荐用&lt;ins&gt;标签，语义更强烈 4.4 文本格式化标签&lt;div&gt; 和 &lt;span&gt; 是没有语义的，就是一个盒子，用来装内容 12&lt;div&gt; 这是一个盒子 &lt;/div&gt;&lt;span&gt;这也是一个盒子&lt;/span&gt; div 是 division 的缩写，表示分割，分区span 意味跨度，跨越 特点： &lt;div&gt; 标签用来布局，但一行只能放一个 &lt;div&gt;，可视作一个大盒子 &lt;span&gt; 标签用来布局，一行可以放多个&lt;span&gt;，可视作一个小盒子 4.5 图像的标签和路径4.5.1 图像标签在HTML 标签中， &lt;img&gt;标签用于定义HTML页面的图像 1&lt;img src = &quot;图像url&quot;&gt; img 为单词 img 的缩写，意为图像src 是&lt;img&gt;标签 的必须属性，用于指定图像文件的路径和文件名 属性 属性值 说明 src 图片路径 必须属性 alt 文本 替换文本，图像不能显示时显示的文字 title 文本 提示文本，鼠标放在图像上时显示的文字 width 像素 设置图像的宽度 height 像素 设置图像的高度 border 像素 设置图像的边框粗细 图像标签属性注意点： 图像标签可以拥有多个属性，必须写在标签名后面 属性之间不分先后顺序，标签名与属性，属性和属性之间均以空格分开 实行采取键值对的格式，即 key &#x3D; “value” 的格式，属性 &#x3D; “ 属性值 ” 4.5.2 路径路径整体可分为绝对路径和相对路径两类相对路径：以引用文件所在位置为参考基础而建立的目录路径，简单来说就是图片相对于HTML页面的位置 相对路径分类 符号 说明 同一级路径 图像文件位于HTML文件同一级 下一级路径 &#x2F; 图像位于HTML文件的下一级 上一级路径 ..&#x2F; 图像位于HTML文件的上一级 绝对路径：指目录下的绝对位置，直接到达目标位置，通常是从盘符开始的路径 4.6 超链接标签在HTML标签中，&lt;a&gt;标签 用于定义超链接，作用是从一个页面链接到另一个页面 4.6.1 链接的语法格式1&lt;a href = &quot;跳转目标&quot; target = &quot;目标窗口的弹出方式&quot;&gt; 文本或图像 &lt;/a&gt; a 为单词 anchor 的缩写，意味 “ 锚点 “ 属性 作用 href 作用指定连接目标的url地址，（必须属性）为当前标签应用 href 属性时，它就有了超链接功能 target 用于指定链接页面的打开方式，其中_self为默认值，_blank为在新窗口中的打开方式 4.6.2 链接分类 外部链接 内部链接：网站内部页面之间的相互链接，直接连接内部页面名称即可 空链接：如果当时确定链接目标时，&lt;a href &#x3D; “#”&gt;首页&lt;&#x2F;a&gt; 下载链接：如果href里面的地址时一个文件或者压缩包，会直接进行下载 网页元素链接：在网页中的各种网页元素，如文本，图像，表格，音频，视频等都可以添加超链接 锚点链接：点击链接时可快速到达页面中的某个位置 在链接文本的href属性中，设置属性值为 #名字 的形式 找到目标位置标签，里面添加一个id属性 &#x3D; 刚才的名字 5 HTML 注释和特殊字符5.1 注释如果需要在HTML文档中添加一些便于阅读和理解但又不需要显示在页面中的文字，就需要使用注释标签HTML中的以”&lt;!– 开头”， 以 “\\ –&gt;”结束 12&lt;!-- 注释语句 --&gt;快捷键为：ctrl + / 添加注释是为了更好地解释代码的功能，便于开发人员理解和阅读代码，程序是不会执行注释内容的 5.2 特殊字符 特殊符号 描述 字符代码 空格符 &amp;nbsp; &lt; 小于号 &lt; &gt; 大于号 &amp;gt; &amp; 和号 &amp;amp; ￥ 人民币 \\yen; © 版权 &amp;copy; ® 注册商标 &amp;reg; ° 摄氏度 &amp;deg; ± 正负号 &amp;plusmn; × 乘号 &amp;times; ÷ 除号 &amp;divide; ² 平方2（上标2） &amp;sup2; 6 表格标签6.1 表格的主要作用表格主要用于显示数据，展示数据，因为它可以让数据显示的非常规整，增强可读性，表格不是用来布局页面的，而是用来显示数据的 6.2 表格基本语法1234567&lt;table&gt; &lt;tr&gt; &lt;td&gt;单元格内的文字&lt;/td&gt; ... &lt;/tr&gt; ...&lt;/table&gt; &lt;table&gt; &lt;&#x2F;table&gt;标签 是用于定义表格的标签 &lt;tr&gt; &lt;&#x2F;tr&gt;标签 用于定义表格中的行， 必须嵌套在&lt;table&gt; &lt;&#x2F;table&gt;标签 中 &lt;td&gt; &lt;&#x2F;td&gt; 标签用于定义表格中的单元格，必须嵌套&lt;tr&gt; &lt;&#x2F;tr&gt;标签中 字母 td 指表格数据 (table table), 即数据单元格的内容 6.3 表头单元格标签表头单元格也是单元格，一般位于表格的第一行或第一列，表头单元格里面的文本内容加粗居中显示 &lt;th&gt;标签 用于HTML表格的表头部分(table head)的缩写 12345678&lt;table&gt; &lt;tr&gt; &lt;th&gt;表头&lt;/th&gt; ...... &lt;/tr&gt; ......&lt;/table&gt; 6.4 表格属性表格属性需要写到表格标签&lt;table&gt; 里面去 属性名 属性值 描述 align left,center,right 规定表格相对周围元素的对其方式 border 1 或 “ “ 规定表格单元之间是否拥有边框，默认为 “ “ ,表示没有边框 cellpadding 像素值 规定单元边沿与其内容之间的空白，默认1像素 cellspacing 像素值 规定单元格之间的空白，默认1像素 width 像素值或百分比 规定表格的宽度 height 像素或百分比 规定表格的高度 6.5 表格结构标签当表格过长时，为了更好的表示表格语义，将表格分割成表格头部和表格主体两大部分。在表格标签中，分别用：&lt;thead&gt;标签 表示表格头部区域 &lt;tbody&gt;标签 表示表格的主体区域。这样更好地分清表格结构 &lt;&#x2F;thread&gt; &lt;&#x2F;thread&gt;标签：用于定义表格头部。&lt;thread&gt;内部必须拥有&lt;tr&gt;标签。一般位于第一行 &lt;tbody&gt; &lt;&#x2F;tbody&gt;标签：用于定义表格的主体，主要用于存放数据本体 以上标签全部放于&lt;table&gt; &lt;&#x2F;table&gt;标签中 6.6 合并单元格跨行合并： 以上侧单元格为目标单元格，写合并代码 1rowspan = &quot;合并单元格的个数&quot; 跨列合并： 以左侧单元格为目标单元格，写合并代码 1colspan = &quot;合并单元格个数&quot; 和并单元格3步： 确定单元格合并方式 找到目标单元格，写合并代码 删除多余单元格 7 列表标签7.1 无序列表&lt;ul&gt;标签表示 HTML 页面中项目的无序列表，一般以项目符号呈现列表项，而列表项使用 &lt;li&gt;标签 定义。 123456&lt;ul&gt; &lt;li&gt;列表项1&lt;/li&gt; &lt;li&gt;列表项2&lt;/li&gt; &lt;li&gt;列表项3&lt;/li&gt; ...&lt;/ul&gt; 无序列表的各个列表项之间没有顺序之分，是并列的 &lt;ul&gt; &lt;&#x2F;ul&gt;中只能直接嵌套 &lt;li&gt;标签 ,不能直接嵌套其他标签 &lt;li&gt; &lt;&#x2F;li&gt;之间相当于一个容器，可以容纳所有元素 7.2 有序列表有序列表即为有顺序排列的列表，其各个列表项会按照一定的顺序排列定义 在HTML标签中，&lt;ol&gt;标签 用于定义有序列表，列表排序以数字来显示，并且使用&lt;li&gt;标签来定义列表项 123456&lt;ol&gt; &lt;li&gt;列表项1&lt;/li&gt; &lt;li&gt;列表项2&lt;/li&gt; &lt;li&gt;列表项3&lt;/li&gt; ...&lt;/ol&gt; &lt;ul&gt; &lt;&#x2F;ul&gt;中只能直接嵌套 &lt;li&gt;标签 ,不能直接嵌套其他标签 &lt;li&gt; &lt;&#x2F;li&gt;之间相当于一个容器，可以容纳所有元素 7.3 自定义列表自定义列表常用于对术语或名词的解释和描述，定义列表的列表项前没有任何符号 在HTML标签中， &lt;dt&gt; 标签用于定义描述列表（或定义列表），该标签与 &lt;dd &gt; （描述每一个项目&#x2F;名字）一起使用 12345&lt;dl&gt; &lt;dt&gt;名词1&lt;/dt&gt; &lt;dd&gt;名词1解释1&lt;/dd&gt; &lt;dd&gt;名词1解释2&lt;/dd&gt;&lt;dl&gt; 7.4 列表总结 标签名 定义 说明 &lt;ul&gt; &lt;&#x2F;ul&gt; 无序标签 里面只能包含&lt;li&gt; 没有顺序，使用频率较高。&lt;li&gt;里面可与包函任何标签 &lt;ol&gt; &lt;&#x2F;ol&gt; 有序标签 里面只能包含&lt;li&gt; 有顺序，使用频率较低。&lt;li&gt;里面可与包函任何标签 &lt;dl&gt; &lt;&#x2F;dl&gt; 自定义标签 里面只能包含 &lt;dt&gt; 和 &lt;dd&gt; ，&lt;dt&gt; 和 &lt;dd&gt;里面可以放任何标签 8. 表单标签在HTML中，一个完整的表单通常由表单域，表单控件（也称表单元素）和提示信息三个部分构成 8.1 表单域表单域是一个包含表单元素的区域 在HTML标签中，&lt;from&gt;标签用于定义表单域，以实现用户信息的收集和传递。 &lt;from&gt;会把它范围内的表单元素信息提交给服务器 123&lt;form action = &quot;url地址&quot; methed = &quot;提交方式&quot; name = &quot;表单域名称&quot;&gt; 各种表单域控件&lt;/fotm&gt; 常用属性： 属性 属性值 作用 action url地址 用于指定接受并处理表单数据的服务器程序的url地址 method get&#x2F;post 用于设置表单数据的提交方式，其取值为get或post name 名称 用于指定表单的名称，以区分同一个页面中的多个表单域 写表单元素之前，应该有个表单域把他们进行包含 表单域是 &lt;form&gt; 标签 8.2 &lt;input&gt; 输入表单元素表单元素中，&lt;input&gt;标签用于收集用户信息 在&lt;input&gt;标签中，包含一个type属性，根据不同的type属性值，输入前端拥有很多种形式（可以是文本字段、复选框、掩码后的文本控件、单位按钮、按钮等） 1&lt;input type = &quot;属性值&quot;&gt; &lt;input&gt;标签为单标签 type属性设置不同的属性值用来指定不同的控件类型 type属性的属性值及其描述 属性值 描述 button 定义可点击按钮(多数情况下，用于通过JavaScript启动脚本) checkbox 定义复选框 file 定义输入字段和 “ 浏览 ”按钮，供文件上传 hidden 定义隐藏的输入字段 image 定义图像形式的提交按钮 password 定义密码字段，该字段中的字符被掩码 radio 定义单选按钮 reset 定义重置按钮，重置按钮会清除表单中的所有数据 submit 定义提交按钮，提交按钮会把表单数据发送到服务器 text 定义单行的输入字段，用户可在其中输入文本。默认宽度为 20 字符 除type属性外，&lt;input&gt;标签中还有其他很多属性，常用属性如下： 属性 属性值 描述 name 由用户自定义 定义input元素名称 value 由用户自定义 规定input元素的值 checked checked 规定input元素首次加载时应当被选中 maxlength 正整数 规定输入字段中的字符的最大长度 name 和 value 是每个表单元素都有的属性值，主要给后台人员使用 name 表单元素的名字， 要求 单选按钮和复选框要有相同的name值 8.3 &lt;label&gt;标签**&lt;label&gt; **标签为input元素定义标注（标签） **&lt;label&gt; **标签用于绑定一个表单元素，当点击&lt;label&gt; 标签时，浏览器会自动将焦点（光标）转到或者选择对应的表单元素上，用来增加用户体验 12&lt;label for=&quot;forid&quot;&gt; &lt;/label&gt;&lt;input type=&quot;type&quot; name=name id=&quot;forid&quot; /&gt; &lt;label&gt;标签的for属性应当与相关元素的id属性相同 8.4 &lt;select&gt;下拉表单元素在页面中，如果有多个选项让用户选择，并且想要节约页面空间时，可以使用&lt;select&gt;标签控件定义下拉列表 1234567&lt;select&gt; &lt;option&gt;选项1&lt;/option&gt; &lt;option&gt;选项2&lt;/option&gt; &lt;option&gt;选项3&lt;/option&gt; ... &lt;option&gt;选项n&lt;/option&gt;&lt;/select&gt; 在&lt;select&gt;中至少包含一对&lt;option&gt; 在&lt;option&gt;中定义 selected&#x3D;”selected”时，当前项即为默认选中项 8.5 &lt;textarea&gt;文本域表单元素当输入内容较多的情况下，使用&lt;textarea&gt;标签 在表单元素中，&lt;textarea&gt;标签是用于定义多行文本输入的控件 使用多行文本输入控件，可以输入更多的文字，常用于留言板、评论等 123&lt;textarea rows=&quot; &quot; cols=&quot; &quot;&gt; 文本内容&lt;/textarea&gt; 通过&lt;textarea&gt;标签可以轻松创建多行文本输入框 cols&#x3D;”每行中的字符数”， rows&#x3D;”显示的行数”，实际开发中，一般通过CSS来改变大小","categories":[{"name":"前端","slug":"前端","permalink":"http://hao-yv.github.io/category/%E5%89%8D%E7%AB%AF/"},{"name":"HTML","slug":"前端/HTML","permalink":"http://hao-yv.github.io/category/%E5%89%8D%E7%AB%AF/HTML/"}],"tags":[{"name":"文档","slug":"文档","permalink":"http://hao-yv.github.io/tag/%E6%96%87%E6%A1%A3/"}],"author":null},{"title":"JDBC文档","slug":"JDBC文档","date":"2024-02-21T10:29:10.447Z","updated":"2024-02-21T10:36:56.343Z","comments":true,"path":"article/4c4e7025/","link":"","permalink":"http://hao-yv.github.io/article/4c4e7025/","excerpt":"","text":"JDBC文档Mysql配置文件mysql.properties 1234driver = com.mysql.cj.jdbc.Driverurl=jdbc:mysql://localhost:3306/数据库名?useUnicode=true&amp;characterEncoding=utf8username=usernamepassword=password JDBC工具类 JDBC工具类将JDBC连接池的常用方法进行封装，使用时直接导入即可，无序重复多次写，提高代码复用性 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657import java.io.FileInputStream;import java.io.IOException;import java.sql.*;import java.util.Properties;public class Jutils &#123; // 定义相关属性 private static String user; // 用户名 private static String password; // 密码 private static String url; // url private static String driver; // 驱动名 // 代码块初始化配置文件 static &#123; Properties properties = new Properties(); try &#123; properties.load(new FileInputStream(&quot;src\\\\mysql.properties&quot;)); user = properties.getProperty(&quot;username&quot;); password = properties.getProperty(&quot;password&quot;); url = properties.getProperty(&quot;url&quot;); driver = properties.getProperty(&quot;driver&quot;); Class.forName(driver); &#125; catch (IOException e) &#123; throw new RuntimeException(e); &#125; catch (ClassNotFoundException e) &#123; throw new RuntimeException(e); &#125; &#125; // 连接数据库, 返回 Connection public static Connection getConnection()&#123; try &#123; return DriverManager.getConnection(url, user, password); &#125; catch (SQLException e) &#123; throw new RuntimeException(e); &#125; &#125; // 关闭相关资源， 如果需要关闭资源就传入对象，否则为 NULL public static void close(ResultSet set, Statement statement, Connection connection)&#123; // 判断是否为空 try &#123; if(set != null)&#123; set.close(); &#125; if(statement != null)&#123; statement.close(); &#125; if(connection != null)&#123; statement.close(); &#125; &#125; catch (SQLException e) &#123; throw new RuntimeException(e); &#125; &#125;&#125;","categories":[{"name":"JDBC工具类","slug":"JDBC工具类","permalink":"http://hao-yv.github.io/category/JDBC%E5%B7%A5%E5%85%B7%E7%B1%BB/"}],"tags":[{"name":"文档","slug":"文档","permalink":"http://hao-yv.github.io/tag/%E6%96%87%E6%A1%A3/"}],"author":null},{"title":"Druids文档","slug":"Druids文档","date":"2024-02-21T10:29:10.445Z","updated":"2024-02-21T11:03:31.917Z","comments":true,"path":"article/2039cc48/","link":"","permalink":"http://hao-yv.github.io/article/2039cc48/","excerpt":"","text":"Druids连接池Druids配置文件druid.properties 1234567driverClassName = com.mysql.cj.jdbc.Driverurl=jdbc:mysql://localhost:3306/数据库名?useUnicode=true&amp;characterEncoding=utf8username=usernamepassword=passwordinitialSize = 10maxActive = 30maxWait = 3000 德鲁伊（Druids）工具类德鲁伊工具类将德鲁伊连接池的常用方法进行封装，使用时直接导入即可，无序重复多次写，提高代码复用性 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051import com.alibaba.druid.pool.DruidDataSourceFactory;import javax.sql.DataSource;import java.io.FileInputStream;import java.sql.Connection;import java.sql.ResultSet;import java.sql.SQLException;import java.sql.Statement;import java.util.Properties;public class Dutils &#123; private static DataSource dataSource; // 静态代码块完成dataSource初始化 static &#123; Properties properties = new Properties(); try &#123; properties.load(new FileInputStream(&quot;src\\\\druid.properties&quot;)); dataSource = DruidDataSourceFactory.createDataSource(properties); &#125; catch (Exception e) &#123; throw new RuntimeException(e); &#125; &#125; // 编写 getConnection 方法 public static Connection getConnection() &#123; try &#123; return dataSource.getConnection(); &#125; catch (SQLException e) &#123; throw new RuntimeException(e); &#125; &#125; // 关闭连接 // 在连接池技术中，close不是真的断掉连接，而是将使用Connection 对象放回连接池 public static void close(ResultSet resultSet , Statement statement, Connection connection)&#123; try &#123; if(resultSet != null)&#123; resultSet.close(); &#125; if (statement != null)&#123; statement.close(); &#125; if(connection != null)&#123; connection.close(); &#125; &#125; catch (SQLException e) &#123; throw new RuntimeException(e); &#125; &#125;&#125;","categories":[{"name":"Druids工具类","slug":"Druids工具类","permalink":"http://hao-yv.github.io/category/Druids%E5%B7%A5%E5%85%B7%E7%B1%BB/"}],"tags":[{"name":"文档","slug":"文档","permalink":"http://hao-yv.github.io/tag/%E6%96%87%E6%A1%A3/"}],"author":null},{"title":"SQL文档","slug":"SQL文档","date":"2024-02-17T01:25:51.000Z","updated":"2024-02-19T14:13:43.142Z","comments":true,"path":"article/c88f20d/","link":"","permalink":"http://hao-yv.github.io/article/c88f20d/","excerpt":"","text":"sqlsql通用语法 SQL语句可以单行或多行书写，以分号结尾 SQL语句可以使用空格&#x2F;缩进来增强语句可读性 MySQL数据库的SQL语句不区分大小写，但关键字建议大写 注释： 单行注释：-- 注释内容 或 # 注释内容（Mysql特有） 多行注释：&#x2F;* 注释内容*&#x2F; sql语句分类 分类 全称 说明 DDL Data Definition Language 数据定义语言，用来定义数据库对象（数据库， 表， 字段） DML Data Maniulation Language 数据操作语言，用来对数据库表中的数据进行增删改 DQL Data Query Language 数据查询语言，用来查询数据库表中的记录 DCL Data Control Language 数据控制语言，用来创建用户，控制数据库访问权限 SQL数据分类数据类型 类型 大小 有符号（SIGEND）范围 无符号（UNSIGEND）范围 描述 TINYINT 1 byte (-128, 127) (0, 255) 小整数值 SMALLINT 2 bytes (-32 768, 32 767) (0, 65 535) 大整数值 MEDIUMINT 3 bytes (-8 388 608, 8 388 607) (0, 16 777 215) 大整数值 INT 或 INTEGER 4 bytes (-2 147 483 648, 2 147 483 647) (0, 4 294 967 295) 大整数值 BIGINT 8 bytes ($-2^{63}$ , $2^{63} - 1$ ) (0, $2^{64} - 1$) 极大整数值 FLOAT 6 bytes (-3.402 823 466 E + 38, 3.402 823 466 351 E + 38) 0 和 (1.175 494 351 E -38, 3.02 823 466 E + 308) 单精度浮点数值 DOUBLE 8 bytes (-1.7976931348623157 E + 308, 1.7976931348623157 E + 308) 0 和 (2.2 250 738 585 072 014 E - 308, 1.796 931 348 623 157 E + 308) 双精度浮点数值 DECIMAL 依赖于M（精度）和D（标度）的值 依赖于M（精度）和D（标度）的值 小数值（精确定点数） 字符串类型 类型 大小 描述 CHAR 0 ~ 255 bytes 定长字符串 VARCHAR 0 ~ 65 535 bytes 变长字符串 TINYBLOB 0 ~ 255 bytes 不超过255个字符的二进制数据 TINYTEXT 0 ~ 255 bytes 短文本字符串 BLOB 0 ~ 65 535 bytes 二进制形式长文本数据 TEXT 0 ~ 65 535 bytes 长文本数据 MEDIUMBLOB 0 ~ 16 777 215 bytes 二进制形式的中等长度文本数据 MEDIUMTEXT 0 ~ 16 777 215 bytes 中等长度文本数据 LONGBLOB 0 - 4294 967 295 bytes 二进制形式的极大文本数据 LONGTEXT 0 ~ 4294 967 295 bytes 极大文本数据 日期类型 类型 大小 范围 格式 描述 DATE 3 1000-01-01 至 9999-12-31 YYYY-MM-DD 日期值 TIME 3 - 838 : 59 : 59 至 838 : 59 : 59 HH : MM : SS 时间值或持续时间 YEAR 1 1901 至 2155 YYYY 年份值 DATETIME 8 1000 - 01 - 01 00 : 00 : 01 至 9999 - 12 - 31 23 : 59 : 59 YYYY -MM - DD HH : MM : SS 混合日期和时间值 DATETIME 4 1970 - 01 - 01 00 : 00 : 01 至 2038 - 01 - 19 03 ： 14 ： 07 YYYY - MM - DD HH : MM : SS 混合日期和时间值 DDL —— 数据定义语言DDL英文全称是Data Definition Language(数据定义语言)，负责数据结构定义与数据库对象定义 查询查询所有数据库 1SHOW DATABASES; 查询当前数据库 1SELECT DATABASES; 查询当前数据库所有表 1SHOW TABLES; 查询表结构 1DESC 表名; 查询指定表的建表语句 1SHOW CREATE TABLE 表名; 创建创建数据库 1CREATE DATABASE [IF NOT EXISTS] 数据库名 [DEFAULT CHARSET 字符集][COLLATE 排序规则]; 创建数据库表 1234567CREATE TABLE 表名( 字段1 字段1类型[COMMeNT 字段1注解], 字段2 字段2类型[COMMeNT 字段2注解], 字段3 字段3类型[COMMeNT 字段3注解], ...... 字段n 字段n类型[COMMeNT 字段n注解],)[COMMRNT 表注解]; 删除删除数据库 1DROP DATABASES [IF EXISTS] 数据库名; 删除表 1DROP TABLE[IF EXISTS] 表名; 删除指定表，并重新弄创建该表 1TRUNCATE TABLE 表名; 使用使用数据库 1USE 数据库名; 添加添加表中字段 1ALTER 表名 ADD 字段名 类型(长度) [COMMENT 注释][约束] 修改修改表中数据类型 1ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度); 修改表中字段名和数据类型 1ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释][约束]; 修改表名 1ALTER TABLE 表名 RENAME TO 新表名； DDL总结数据库操作 12345SHOW DATABASES;CREATE DATABASE 数据库名;USE 数据库名;SELECT DATABASES();DROP DATABASE 数据库名; 表操作 123456SHOW TABLES;CREATE TABLE 表名(字段 字段类型, 字段 字段类型)DESC 表名;SHOW CREATE TABLE 表名;ALTER TABLE 表名 ADD/ MODIFY/ CHANGE/ DROP/ RENAME TO...;DROP TABLE 表名; DML —— 数据操作语言DML英文全称是DATA Mainpulation Languague(数据操作语言)，用来对数据库表中表的诗句记录进行增删改操作 数据添加给指定字段添加数据 1INSERT INTO 表名(字段名1， 字段名2, ... ) VALUES(值1， 值2, ...); 给全部字段添加数据 1INSERT INTO 表名 VALUES(值1, 值2, ...); 批量添加数据 12INSERT INTO 表名(字段名1， 字段名2，...) VALUES(值1， 值2, ...), (值1， 值2, ...),...(值1， 值2, ...);INSERT INTO 表名 VALUES (值1， 值2...)，(值1， 值2...),...(值1， 值2...); 注意： 插入数据时，指定的字段顺序需要于值的顺序一一对应 字符串和日期型数据应包含在引号里 插入的数据大小，应该在字段的规定范围内 数据修改1UPDATE 表名 SET 字段名1 = 值1， 字段名2 = 值2，...[WHERE 条件]; 注意： UPDATE语句条件可以有也可以没有，如果没有条件，则会修改整张表的所有数据 数据删除1DELETE FROM 表名 [WHERE 条件]; 注意： DELETE语句条件可以有也可以没有，如果没有条件，则会删除整张表的所有数据 DELETE语句不能删除某一个字段的值（可以使用UPDATE） DML总结添加数据 1INSERT INTO 表名(字段名1， 字段名2，...) VALUES(值1， 值2, ...), (值1， 值2, ...),...(值1， 值2, ...); 修改数据 1UPDATE 表名 SET 字段名1 = 值1， 字段名2 = 值2，...[WHERE 条件]; 删除数据 1DELETE FROM 表名 [WHERE 条件]; DQL —— 数据查询语言DML英文全称是DATA Mainpulation Languague(数据查询语言)，用来查询数据库中表的记录 基本查询查询多个字段 12SELECT 字段1, 字段2, ... FROM 表名;SELECT * FROM 表名; 设置别名 1SELECT 字段1 [AS 别名1], 字段2 [AS 别名2], ... FROM 表名; 去除重复记录 1SELECT DISTINCT 字段列表 FROM 表名; 条件查询1SELECT 字段列表 FROM 表名 WHERE 条件列表; 条件： 比较运算符 功能 &gt; 大于 &gt;&#x3D; 大于等于 &lt; 小于等于 &#x3D; 等于 &lt;&gt; 或 !&#x3D; 不等于 BERWEEN … AND … 在某个范围之内（含最大、最小值） IN(…) 在 in 之后的列表中的值， 多选一 LIKE 占位符 模糊匹配（ _ 匹配单个字符， % 匹配任意个字符） IS NULL 是NULL 逻辑运算符 功能 AND 或 &amp;&amp; 并且（多个条件同时成立） OR 或 || 或者（多个条件任意一个成立） NOT 或 ！ 非，不是 分组查询聚合函数 将一系列数据作为整体，进行纵向运算 函数 功能 count 统计数量 max 最大值 min 最小值 avg 平均值 sum 求和 语法 1SELECT 聚合函数(字段列表) FROM 表名 [WHERE 条件]; 注意： NULL值不参与聚合函数运算 分组数据查询 1SELECT 字段列表 FROM 表名 [WHERE 条件] GROUP BY 分组字段名 [HAVING 分组后过滤条件]; WHERE 和 HAVING 的区别： ​ 执行时机不同：where是分组之前进行过滤，不满足where条件则不参与分组；而having是分组之后对数据进行过滤 ​ 判断条件不同：where不能对聚合函数进行判断，而having可以 执行顺序：WHERE &gt; 聚合函数 &gt; HAVING 分组之后，查询字段一般为聚合函数和分组字段，查询其他字段无任何意义 排序查询数据排序 1SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1, 字段2, 排序方式2; 注意： 如果是多字段排序，只有第一个字段相同时，才会根据第二个字段进行排序 ASC代表升序 DESC代表降序 分页查询1SELECT 字段列表 FROM 表名 LIMT 起始索引, 查询记录数; 注意： 起始索引从 0 开始， 起始索引 &#x3D; ( 查询页码 - 1) * 每页显示记录数 分页查询是数据库的方言，不同数据库有不同的实现，MySQL是 LIMT 如果查询的是第一页数据，起始索引可以省略，直接简写为 Limit 10 DQL语句编写和执行顺序1234567891011121314SELECT 4 FROM 字段列表 表名列表FROM 1 WHERE 表名列表 条件列表WHERE 2 GROUP BY 条件列表 分组字段列表GROUP BY 3 HAVING 分组字段列表 分组后字段列表HAVING SELECT 分组后条件列表 字段列表ORDER BY 5 ORDER BY 排序字段列表 排序字段列表LIMIT 6 LIMIT 分页参数 分页参数 DQL总结1234567891011121314SELECT 字段列表 -------&gt; 字段名 [AS] 别名FROM 表名列表WHERE 条件列表 -------&gt; &gt;、 &gt;=、&lt;、&lt;=、&lt;&gt;、 like、 between and in、 and、 orGROUP BY 分组字段列表HAVING 分组后条件列表ORDER BY 排序字段列表 -------&gt; 升序ASC， 降序DESCLIMIT 分页参数 -------&gt; 起始索引（从0开始）， 每页展示记录数 DCL —— 数据控制语言DCL英文全称是DML英文全称是DATA Mainpulation Languague(数据查询语言)，用来管理数据库、用户、控制数据库的访问权限 用户管理1、查询用户 12USE mysql;SELECT * FROM user； 2、创建用户 1CREATE USER &#x27;用户名&#x27;@&#x27;主机名&#x27; IDENTIFIED BY &#x27;密码&#x27;; 3、修改用户密码 1ALTER USER &#x27;用户名&#x27;@&#x27;主机名&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;新密码&#x27; 4、删除用户 1DROP USER &#x27;用户名&#x27;@&#x27;主机名&#x27;; 权限控制 查询权限 1SHOW GRANTS FOR &#x27;用户名&#x27;@&#x27;主机名&#x27;; 授予权限 1GRANT 权限列表 ON 数据库名.表名 TO &#x27;用户名&#x27;@&#x27;主机名&#x27; 撤销权限 1REMOVE 权限列表 ON 数据库名.表名 FROM &#x27;用户名&#x27;@&#x27;主机名&#x27;; MySQL常用权限： 权限 说明 ALL、ALL PRIVILEGES 所有权限 SELECT 查询数据 INSERT 插入数据 UPDATE 修改数据 DELTTE 删除数据 ALTER 修改表 DROP 删除数据库&#x2F;表&#x2F;视图 CREATE 创建数据库表 注意： 多个权限之间，使用逗号分隔 授权时，数据库名和表名可以用 * 进行分配，代表所有 函数函数是指一段可以被直接被另一段程序调用的代码 字符串函数 函数 功能 COUNT (S1, S1, … $S_{n}$) 字符串拼接，将S1, S2, … $S_{n}$ 拼接成一个字符串 LOWER (str) 将字符串 str 全部转为 小写 UPPER (str) 将字符串 str 全部转为 大写 LPAD (str, n, pad) 左填充，用字符串pad对str的左边进行填充，达到n个字符串长度 RPAD（str, n, pad） 右填充，用字符串pad对str的右边进行填充，达到n个字符串长度 TRM（str） 去掉字符串头部和尾部的空格 SUBSTRING（str, start, len） 去掉字符串str位置起的len个长度的字符串 数值函数 函数 功能 CEIL(x) 向上取整 FLOOR(x) 向下取整 MOD(x, y) 返回 x &#x2F; y 的模 RAND() 返回 0 ~ 1之内的随机数 ROUND(x, y) 求参数 x 的四舍五入的值，保留 y 位小数 日期函数 函数 功能 CURDATE() 返回当前日期 CURTIME() 返回当前时间 NOW() 返回当前日期和时间 YEAR(date) 获取指定 date 的年份 MONIH(date) 获取指定 date 的月份 DAY(date) 获取指定 date 的日期 DATE_ADD(date, INTERVAL expr type) 返回一个日期&#x2F;时间值加上一个时间间隔 expr 的时间值 DATEDIFF(date1, date1) 返回起始时间 date1 和 结束时间 date2 之间的天数 流程函数 函数 功能 IF(value, t ,f) 如果 value 值为true则返回 t ，否则返回 f IFNULL(value1， value2) 如果 value1不为空，则返回value1，否则value2 CASE WHEN [vall] THEN [res1] … ELSE [default] END 如果 expr 的值为 true, 返回 res1, … 否则返回 default 默认值 CASE [expr] WHEN [vall] THEN [res1] … ELSE [default] END 如果 expr 的值等于 vall ，返回 res1, … 否则返回 default 默认值 约束约束是作用于表中字段上的规则，用于限制存储在表中的数据，保证数据库中数据的正确性，有效性和完整性 约束 描述 关键字 非空约束 限制该字段的数据不能为NULL NOT NULL 唯一约束 保证该字段的所有数据都是唯一、不充分的 UNIQUE 主键约束 主键是一行数据的唯一标识，要求非空且唯一 PRIMARY KEY 默认约束 保存数据时，如果未指定该字段的值，则采用默认值 DEFAULT 检查约束（8.0.16版本之后） 保证字段值满足某一条件 CHECK 外键约束 用来让两张表的数据之间建立连接，保证数据的一致性和完整性 FOREIGN KEY 外键约束外键用来让两张表的数据之间建立连接，从而保证数据的一致性和完整性 添加外键 12345CREATE TABLE 表名( 字段名 数据类型 ...... [CONSTRAINT] [外键名称] FOREIGN KEY(外键字段名) REFERENCES 主表(主表列名)); 1ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY(外键字段名) REFERENCES 主表(主表列名) 删除外键 1ALTER TABLE 表名 DROP FOREIGN KEY 外键名称; 外键删除更新行为 行为 说明 NO ACTION 当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有，则不允许删除&#x2F;更新（与RESTRICT）一致 RESTRICT 当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有，则不允许删除&#x2F;更新（与NO ACTION一致） CASTRICT 当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有，则也删除&#x2F;更新外键在子表中的记录 SET NULL 当在父表中删除对应记录时，首先检查该记录是否有对应外键，如果有，则设置子表中该外键值为NULL（要求该外键允许使用null） SET DEFAULT 父表有变更时，子表将设置外阿健列成一个默认值（lnnodb不支持） 1ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段) REFERENCES 主表名(主表字段名) ON UPDATE 行为 ON DELETE 行为; 多表关系 由于业务之间相互练习，各个表之间也存在着各种联系，分为一对多、多对多和一对一 一对多：在多的一方建立外键，指向一的一方的主键 多对多：建立第三方表，中间表至少包含两个外键，分别关联两方主键 一对一：在任意一方加入外键，关联另一方的主键，并设置外键为唯一UNIQUE 多表查询 指从多张表中查询数据 笛卡尔积是指在数学中，两个集合的所有组合情况（在多表查询时，需要消除无效的笛卡尔积） 多表查询分类 连接查询 内连接：相当于查询表A, B交集部分数据 外连接： 左外连接：查询左表数据，以及两张表交集部分数据 右外连接：查询右表数据 子查询 内连接隐式内连接 1SELECT 字段列表 FROM 表1， 表2 WHERE 条件 ...; 显式内连接 1SELECT 字段列表 FROM 表1 [INNER] JOIN 表2 ON 连接条件 ...; 外连接左外连接 1SELECT 字段列表 FROM 表1 LEFT [OUTER] JOIN 表2 ON 条件 ...; 右外连接 1SELECT 字段列表 FROM 表1 RIGHT [OUTER] JOIN 表2 ON 条件 ...; 自连接(自连接查询，可以是内连接，也可以是外联结) 1SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 ...; 联合查询对于union查询，就是把多次查询的结果合并起来，形成一个新的查询结果集 对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致 union all 会将全部的数据直接合并在一起，union 会对合并后的数据去重 123SELECT 字段列表 FROM 表A...UNION[ALL]SELECT 字段列表 FROM 表B...; 子查询 SQL语句中嵌套SELECT语句，称为嵌套查询,又称子查询 子查询外部的语句可以是INSERT &#x2F; UPDATE &#x2F;SELECT 的任何一个 根据子查询结构不同，分为： 标量子查询（子查询结果为单个值） 列子查询（子查询结果为一列） 行子查询（子查询结果为一行） 表子查询（子查询结果为多行多列） 根据子查询位置，分为：WHERE之后，FROM之后，SELECT之后 1SELECT * FROM t1 WHERE count1 = (SELECT column1 FTOM t2); 标量子查询 子查询返回结果值为单个值（数字、字符串、日期等最简单形式） 常用操作符：&#x3D;、&lt;&gt;、&gt;、&gt;&#x3D;、&lt;、&lt;&#x3D; 列子查询 子查询结果返回的是一列（可以是多行） 常用操作符：IN、NOT IN、ANY、SOME、ALL 行子查询 子查询返回的结果是一行（可以是多列） 常用的操作符：&#x3D;、&lt;&gt;、IN、NOT IN 表子查询 子查询返回结果是多行多列 常用操作符：IN 操作符 描述 IN 在指定集合范围内，多选一 NOT IN 不在指定集合范围内 ANY 子查询返回列表中，有任意一个满足即可 SOME 与 ANY 等值，使用 SOME 的地方都可以使用 ANY ALL 子查询返回列表必须都满足 事务事务时一组操作的集合，是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败 事务操作 方式一，设置手动提交指令 查看，设置事务提交方式 12SELECT @@autocommit;SET @@autocommit = 0; 提交事务 1COMMIT; 回滚事务 1ROLLBACK; 方式二， 开启事务指令 开启事务 1START TRANSACTION 或 BEGIN 提交事务 1COMMIT 回滚事务 1ROLLBACK; 事务四大特性 原子性：事务是不可分割的最小操作单元，要么全部成功，要么全部失败 一致性：事务完成时，必须使得所有的数据都保持一致状态 隔离性：数据库提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行 持久性：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的 事务并发问题 问题 描述 脏读 一个事务读到另外一个事务还没有提交的数据 不可重复读 一个事务先后读取同一条事务，但两次读取的数据不同 幻读 一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据已经存在 事务隔离级别 隔离级别 脏读 不可重复读 幻读 Read uncommitted $\\checkmark$ $\\checkmark$ $\\checkmark$ Read committed $\\times$ $\\checkmark$ $\\checkmark$ Repeatable Read(默认) $\\times$ $\\times$ $\\checkmark$ Serializable $\\times$ $\\times$ $\\times$ 1234-- 查看事务隔离级别SELECT @@TRANSACTION_ISOLATION;-- 设置事务隔离界别SET [SESSION] TRANSACTION ISOLATION LEVEL &#123;READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE&#125;","categories":[{"name":"文档","slug":"文档","permalink":"http://hao-yv.github.io/category/%E6%96%87%E6%A1%A3/"}],"tags":[{"name":"文档","slug":"文档","permalink":"http://hao-yv.github.io/tag/%E6%96%87%E6%A1%A3/"},{"name":"sql","slug":"sql","permalink":"http://hao-yv.github.io/tag/sql/"}]},{"title":"计算机网络","slug":"计算机网络","date":"2024-02-15T01:25:51.000Z","updated":"2024-09-02T01:07:10.941Z","comments":true,"path":"article/e255a10a/","link":"","permalink":"http://hao-yv.github.io/article/e255a10a/","excerpt":"","text":"第一章 &nbsp; 计算机网络概述 计算机体系结构：计算机体系结构就是这个计算机网络及其部件所应完成的功能的精确定义。体系结构是抽象的，而显示则是具体的，是真正在运行的计算机硬件及软件。 分组交换：计算机网络主要采用分组交换技术，主要思想为“见机行事，尽可能向前发送报文分组”。当信息量较大时可能会造成网络拥塞 分组交换的主要优点 $\\begin{cases}高效\\灵活\\迅速\\可靠\\end{cases}$ 计算机网络分类(范围从小到大)$\\begin{cases}局域网&amp;&amp;LAN\\城域网&amp;&amp;MAN\\广域网&amp;&amp;WAN\\个人区域网&amp;&amp;PAN \\end{cases}$ 网络协议三要素：语法，语义，时序 数据在各层之间的传输过程示意图： 三种体系结构示意图 ： 五层协议各层功能: 应用层：负责实现网络应用； 运输层：负责主机中两个程序间的通讯； 网络层：负责传送IP地址，实现端到端的运输； 数据链路层：负责将资料组装成帧，并将其发往相邻节点； 物理层：负责在物理线路上传输信号； 第二章 &nbsp; 物理层 信道复用技术$\\begin{cases}频分复用&amp;&amp;FDM\\时分复用&amp;&amp;TDM\\码分复用&amp;&amp;CDM\\end{cases}$ 互联网接入技术$\\begin{cases}电话网拨号接入\\数字用户线接入\\光纤同轴混合网接入\\光纤接入\\以太网接入\\无线接入\\end{cases}$ 第三章 &nbsp; 数据链路层 数据链路层三大基本任务：**封装成帧，差错检测, 可靠传输** CSMA&#x2F;CD协议名词解释 ： CSMA&#x2F;CD协议，即载波监听多址接入&#x2F;冲突避免该协议在CSMA的基础上增加了一个冲突避免功能，而没有实现冲突检测功能。由于不可能避免所有的冲突，且无线信道误码率较高，802.11标准还使用了数据链路层确认机制来保证数据被正确接收 第四章 &nbsp; 网络层 数据报服务不可靠且无连接，尽最大努力交付 虚电路网络是面向连接的可靠传输 虚电路名词解释：虚电路表示这只是一条逻辑上的连接，分组都沿着这条逻辑连接按照存储转发方式传送，而不是真正建立了一个物理连接。电路交换的电话通信时线建立了一条真正的连接。因此分组交换的虚连接和电路交换的连接只是类似，并不是完全一样 数据报服务名词解释：数据报服务是一种简单灵活的无连接的，尽最大努力交付的数据传输服务 为什么网络选择数据报？ 网络的灵活性：数据报服务允许不同大小和类型的数据包在网络上以不同的路径独立传输，这使得网络更加灵活，能够适应各种需求。 分布式路由：数据报服务允许每个数据包根据网络状态和目标地址自行选择最佳路由，而不需要预先建立连接或维护状态信息。这种分布式路由方式可以提高网络的效率和可靠性。 高效的多路复用：数据报服务可以支持多个数据包同时在网络上传输，并且这些数据包可以独立处理，从而在网络资源利用方面更加高效。 总的来说，数据报服务提供了一种灵活、高效和分布式的网络通信方式，适用于现代互联网中大量异构的设备和应用场景。 虚电路网络与数据报网络对比： 对比方面 虚电路网络 数据报网络 思路 可靠通信应当由网络来保证 可靠通信应当由用户主机来保证 连接的建立 必须建立连接 不需要建立连接 终点地址 仅在连接建立阶段使用，每个分组使用短的虚电路号 每个分组都有终点的完整地址 分组的转发 属于同一条虚电路的分组均按照同一条路由进行转发 每个分组独立选择路由进行转发 当结点出现故障时 所有通过出故障的结点在虚电路中均不能工作 到达终点时不一定按照发送顺序 服务质量保证 可以将通信资源提前分配给每一个虚电路，因此较容易实现 较难实现 两种技术的发展趋势是什么？ 数据报网络在互联网中取得了巨大的成功，但作为互联网底底层物理网络的很多广域分组交换网却都是虚电路网络；随着互联网多媒体应用需求的迅速增长，如何让网络提供更好的服务质量愈加重要，虚电路技术有受到了重视。故二者发展趋势为相互借鉴，相互融合，并行发展 点分十进制： 二级IP地址： IP地址 $\\begin{matrix}::&#x3D;\\end{matrix}\\left { \\left \\langle 网络号 \\right \\rangle， \\left \\langle 主机号 \\right \\rangle \\right }$ IP地址中的网络号字段和主机号字段： 三级IP地址： IP地址$\\begin{matrix}::&#x3D;\\end{matrix}\\left { \\left \\langle 网络号 \\right \\rangle ，\\left \\langle 子网号 \\right \\rangle ，\\left \\langle 主机号 \\right \\rangle \\right }$ 无分类的二级编址： IP地址$\\begin{matrix}::&#x3D;\\end{matrix}\\left { \\left \\langle 网络前缀 \\right \\rangle \\left \\langle 主机号 \\right \\rangle \\right }$ IP地址计算和子网划分(还没写) 互联网三大路由协议：RIP, OSPF, BGP 最长前缀匹配名词解释： 网络前缀越长，其地址块越小路由越具体，因而查找路由表时，应当从匹配结果中选择具有最长网络前缀的路由。最长网络匹配又称最长匹配或最佳匹配 VPN名词解释： 又称“虚拟专用网”，利用公用的互联网作为各个专用网之间的通信载体实现不同专用网之间的相互通信 NAT名词解释： 又称“网络地址转换”，使大量内部专用地址的用户共享少量外部全球地址来访问互联网上的主机和资料。这种方法需要在专用网连接到互联网的路由器上运行NAT软件。运行NAT软件的路由器叫做NAT路由器，它至少有一个有效的外部全球地址$IP_{G}$。使所有使用本地地址的主机在和外界通信时都要在NAT路由器上将其本地地址转换成$IP_{G}$ 网络地址转换解决IP地址不足的问题 子网掩码如何划分？ 从网络主机号中借用不定长的若干位作为子网号，主机号减少相应位数，两级IP地址变成了三级IP地址 地址块怎么写？ 第五章 &nbsp; 运输层 用户数据报协议 (UDP)传输控制协议 (TCP) UDP在数据传输之前不需要建立连接.接收方正在受到UDP报文后，不需要做出任何确认。虽然UDP不提供可靠服务，但在某些情况下UDP是一种最有效的工作方式 TCP提供面向连接的服务，在数据传输之前必须先建立连接数据传输结束后要释放连接。TCP不提供广播或多播服务。由于TCP要提供可靠的、面向连接的运输服务，因此增加了在许多开销，不仅使得运输协议数据单元的首部增大很多，还要占用许多处理器资源 端口是应用层与物理层之间接口的抽象，需要在运输层协议进行通信的进程，都需要与某个端口关联，端口号标志了应用进程所关联的端口，相当于应用进程的运输层地址。运输协议数据单元（即TCP报文段或UDP报文段）的首部必须包含两个字段源端口号和目的端口号.运输层收到IP层交上来的数据时，要根据其目的端口号来决定应当同过哪一个端口将其上交给目的的应用进程。 端口号值仅具有本地意义，不同的计算机中相同的端口号没有联系 端口号分类$\\begin {cases}熟知端口号\\登记端口号\\动态端口号 \\end{cases}$ 熟知端口号数值为 0 ~ 1023 这类端口号有IANA负责分配给一些常用的应用层程序固定使用，一种新的应用程序出现时若要获得一个熟知端口号，必须想IANA申请 登记端口号数值为 1024 ~ 49151 这类端口号IANA不分配也不控制，但可以在IANA注册等级，防止重复使用 动态端口号数值为 49152 ~ 465535 这类端口号留给客户进程选座临时端口号，仅供临时使用，用完释放，可以给其他进程使用 TCP的连接建立采用客户 – 服务器的方式 TCP建立连接的三次握手分别为：连接请求、接受请求、发送确认 三次握手示意图： TCP释放连接的四次挥手分别为：释放请求、接受请求、回应请求、确认释放 四次挥手示意图： TCP的有限状态机： 当网络中出现太多分组时，网络的性能开始下降，就会造成拥塞 拥塞控制就是防止过多的数据注入网络，使网络中的路由器或链路不致过载 拥塞控制可以分为开环控制和闭环控制两大类。开环控制方法试图从良好的设计来解决问题，它的本质是从一开始就要保证问题不会发生。一旦系统启动并运行就不需要中途去做修正。闭环控制是一种基于反馈环路的方法，包括三部分（1）检测网络系统以便检测到拥塞在何时，何地发生；（2）把拥塞发生的信息传送到可以采取行动的地方；（3）调整网络系统的运行以解决出现的问题 拥塞控制三种算法$\\begin {cases}慢启动\\拥塞避免\\快速恢复 \\end {cases}$ 较好的防止网络拥塞的方法是通过试探发现网络的可用带宽，即由小到大增大发送方的拥塞窗口数值，直到发生拥塞通畅在刚刚开始发送报文段是可先将拥塞窗口设置为一个MSS[^1]数值。而在每收到一个对新的报文段的确认后，将拥塞窗口增加至多一个MSS数值。用这样的方法逐步增大发送方的拥塞窗口cwnd，可以使分组注入网络的速率更加合理，这就是慢启动算法[^1]: RFC 2581规定在一开始cwnd应设置为不超过2 * MSS字节，并且在一开始不能超过两个报文段。为简化语法将cwnd设置为一个MSS 慢启动阶段发送速率以质数方式增长，若发送速率持续以该速率增长，则网络必然很快进入拥塞状态。当网络接近拥塞时，应降低发送速率的增长速率。TCP定义了慢启动门限ssthresh（即从慢启动进入拥塞避免阶段的门限），超过慢启动阶段就进行拥塞避免 慢启动门限用法如下： 当 cwnd &lt; ssthresh 时，使用慢启动算法； 当 cwnd = ssthresh 时，即可使用慢启动算法，也可使用拥塞避免算法 当 cwnd &gt; ssthresh 时，停止使用慢启动算法而改用拥塞避免算法 &emsp;&emsp;每收到一个新的确认信息，将cwnd(以字节为单位)增加 $MSS \\times (MSS; &#x2F; ; cwnd)$ 字节 无论是慢启动阶段还是拥塞避免阶段，发送方只要发现网络出现故障（检测到分组丢失），就会立即将拥塞窗口的 cwnd 重新设置为1，并执行慢启动算法。同时将慢启动门限ssthresh设置为出现拥塞时的发送窗口大小（即接收方窗口和拥塞窗口中数值较小的一个）的一半（但不能小于2） 执行拥塞避免算法后，拥塞窗口呈线性增长，发送塑料布比较缓慢，以防网络过早出现拥塞，并使发送方可以长时间保持一个合理的发送速率。拥塞避免并不能避免拥塞，而是说把拥塞窗口控制为按线性规律增长，使网络不容易出现拥塞 慢启动算法和拥塞避免算法的实现： 为解决发送方经过很长时间才能恢复正常的传输速率的问题 RFC 2581 定义了与快速重传配套使用的快速恢复算法，具体步骤如下： （1）发丝不过方收到连续三个重复的ACK后，就重新设置慢启动门限ssthresh，将其设置为当前发送窗口大小的一半。这点与慢启动算法相同（2）与慢启动算法的不同之处时拥塞窗口的cwnd不是1，而是设置为新的慢启动门限ssthresh[^2]，然后开始执行拥塞避免算法，使拥塞窗口缓慢地线性增长 加性增和乘性减(AIMD)： 经过慢启动发送方迅速进入拥塞避免状态，该阶段使拥塞窗口呈线性增长，发送速率缓慢增长，以防止网络过早出现拥塞。称为“加性增” 当流量逐渐超过网络可用宽带时会出现拥塞，但由于发送速率增长缓慢，通常仅导致少量分组丢失。这种情况下发送方会受到三个重复的ACK并将拥塞窗口减半，即乘性减，然后在继续执行“加性增” 在这种 “加性增，乘性减” 的拥塞控制下，发送方的平均发送速率始终保持在比较接近网络可用宽带的位置（慢启动门限之上） [^2]: 有的快速恢复实现是把拥塞窗口设置为：$ssthresh+ 3\\times MSS$ 对接受到3个重复ACK和超时事件的不同处理： 第六章 &nbsp; 应用层 万维网四大关键技术$\\begin {cases}统一资源标识符&amp;&amp;URL\\超文本传输协议&amp;&amp;HTTP\\超文本标记语言&amp;&amp;HTML\\搜索引擎 \\end {cases}$ C&#x2F;S体系结构名词解释： 客户&#x2F;服务器体系协议结构包括一个总是运行着的服务器程序和许多有时运行的客户程序。客户进程是服务请求方，服务器进程是服务提供方。该体系结构的另一个特征为：服务器进程总是处于运行状态，并等待客户进程的服务请求。服务器进程具有固定的端口号，而运行服务器的主机也具有固定的IP地址 P2P体系结构名词解释： 对等体系结构中没有固定的服务请求者和服务提供者，分布在网络中的应用进程是对等的，被成为对等方（有时将运行对等方软件的计算机也成为对等方）。对等方相互直接通信，每个对等方即是服务的请求这，又是服务的提供者 应用层协议定义了运行在不同端系统上的应用进程间为实现特定应用而相互通信的规则 交换报文的报文类型，入请求报文和相应报文 各种报文类型的语法，入报文中的各个字段及其详细描述 字段的语义，即包含在字段中的信息的含义 进程何时，如何发送报文及对报文进程相应的规则 域名系统实现计算机名到IP地址的转换，域名到IP地址的转换是由若干域名服务器程序完成的，IP地址的转换过程叫做域名解析。域名服务器程序在专设的主机上运行，运行该程序的主机成为域名服务器 顶级域名(TLD)$\\begin {cases}国家或地区顶级域名&amp;&amp;nTLD\\通用顶级域名&amp;&amp;gTLD\\反向域&amp;&amp;arpa \\end {cases}$ 国家或地区顶级域名采用 ISO 3166 的规定。例如，cn 表示中国， us表示美国 最常见的顶级通用域名有7个：com（公司企业）、net（网络服务机构）、org（非盈利性组织）、int（国际组合）、edu（教育机构）、gov（政府部门）、mil（军事部门） 反向域用于反向域名解析，将IP地址反向解析为域名 二级域名$\\begin {cases}列别域名\\\\行政区域名 \\end {cases}$ 类别域名有7个：ac(科研机构)、com(工、商、金融等企业)、edu(教育机构)、 gov(政府部门)、net(提供网络服务的机构)、mil(军事机构)和org(非盈利性部门组织) 类别域名和顶级域名不要重复使用 行政区域名34个，使用与我国各省、自治区、直辖市。例如：bj 表示北京、sh 表示上海等。特别的tw（台湾）、hk（香港）为顶级域名 域名长度一般为四级，三级以后的域名由各单位自行划分，不在同一划分 互联网名字空间结构： 域名服务器$\\begin {cases}根域名服务器\\顶级域名服务器\\权威域名服务器 \\end {cases}$域名服务器解析域名本质是查找映射表 DNS域名服务器的等级结构： 第七章 &nbsp; 网络安全 安全威胁$\\begin {cases} 被动攻击 \\begin {cases}窃听\\\\流量分析 \\end {cases}\\\\主动攻击：其他\\end {cases}$ 网络通信对应的四种攻击形式： 截断 (Interception)：攻击者从网络上窃听他人的通信内容 中断(Interruption): 攻击者有意中断他人在网络上的通信 篡改(Modification): 攻击这故意篡改网络上传送的报文 伪造(Fabrication): 攻击者伪造信息在网络上传送 恶意程序$\\begin {cases}病毒&amp;非独立文件，需要依附于宿主\\蠕虫&amp;独立文件\\木马&amp;伪装应用\\逻辑炸弹&amp;需要满足特殊条件 \\end {cases}$ 计算机病毒是一种会传染其他程序的程序，通过修改其他程序把自身或其变种复制进去完成传染计算机蠕虫是一种通过网络的通信功能主动将自身从一个结点发送到另一个结点并启动的程序 特洛伊木马是一种在便面功能掩护下执行非授权功能的程序 逻辑炸弹是一种当运行环境满足某种特定条件时执行其他功能的程序 安全服务$\\begin {cases}机密性&amp;Confidentiality\\报文完整性&amp;Message;Integrity\\不可否认性&amp;Nonrepudiation\\实体鉴别&amp;Entity;Authentication\\访问控制&amp;Access;Contril\\可用性&amp;Availability \\end {cases}$ 机密性(Confidentiality)：确保计算机系统中的信息或网络中传输的信息不会泄露给非授权用户 报文完整性(Message)：确保计算机系统中的信息或网络传输中的信息不被非授权用户篡改或伪造 不可否认性(Nonrepudiation)：防止发送方或接收方否认发送或接收过某信息 实体鉴别(Entity)：通信实体能够验证正在通信的对端实体的真是身份，确保不会与冒充者通信。与授权是不同的概念，授权设计的问题是：实体的行为是否被允许 访问控制(Access)：系统具有限制和控制不哦她那个实体对信息源或其他系统资源进行访问的能力。系统必须在鉴别实体身份的基础上对实体访问的权限进行控制 可用性(Availability)：确保授权用户能够正常访问系统或资源 对称密钥密码体制名词解释: 对称密钥密码体制是一种加密密钥和解密密钥相同的密码体制，两个参与者共享同一个秘密密钥，如果用一个特定的密钥加密一套信息，就必须要用相同的密钥来解密该信息。该系统又称对称密钥系统 公钥密码体制名词解释： 公钥密码体制使用不同的加密密钥与解密密钥，加密密钥（公钥）PK是公开信息，而解密密钥（私钥）SK是需要保密的。 私钥SK由公钥PK决定，但不能由PK算出SK 数字签名用于证明数据的出处和真实性，需保证以下三点： 接收方能够核实发送方对报文的数字签名 发送方事后不能抵赖对报文的数字签名 任何人包括接收方都不能伪造对报文的签名 名词对照表|:–:|:–|:–|:–|:–|:–||LAN|局域网|TDM|时分复用|CRC|循环冗余校验||MAN|城域网|CDM|码分复用|PPP|点对点协议||WAN|广域网|FDM|频分复用|CSMA&#x2F;CD|载波监听，多路访问&#x2F;冲突检测||PAN|个人区域网|WDM|波分复用|CSMA&#x2F;CA|载波监听，多路访问&#x2F;冲突避免||ICMP|网络控制报文协议|URL|统一资源标记定位符|VAT|虚拟地址转换||TCP|传输控制协议|SMTP|简单邮件传输协议|DOS|拒绝服务||UDP|用户数据报协议|ADSL|非对称数字用户线路|DDOS|分布式拒绝服务||HTTP|超文本传输协议|HFC|混合光纤同轴电缆|RTT|往返延时||HTML|超文本标记语言|VPN|虚拟专用网络| 名词解释CSMA&#x2F;CA协议名词解释 CSMA&#x2F;CD协议，即载波监听多址接入&#x2F;冲突避免该协议在CSMA的基础上增加了一个冲突避免功能，而没有实现冲突检测功能。由于不可能避免所有的冲突，且无线信道误码率较高，802.11标准还使用了数据链路层确认机制来保证数据被正确接收 虚电路名词解释 虚电路表示这只是一条逻辑上的连接，分组都沿着这条逻辑连接按照存储转发方式传送，而不是真正建立了一个物理连接。电路交换的电话通信时线建立了一条真正的连接。因此分组交换的虚连接和电路交换的连接只是类似，并不是完全一样 数据报服务名词解释 数据报服务是一种简单灵活的无连接的，尽最大努力交付的数据传输服务 最长前缀匹配名词解释 网络前缀越长，其地址块越小路由越具体，因而查找路由表时，应当从匹配结果中选择具有最长网络前缀的路由。最长网络匹配又称最长匹配或最佳匹配 VPN名词解释 又称“虚拟专用网”，利用公用的互联网作为各个专用网之间的通信载体实现不同专用网之间的相互通信 C&#x2F;S体系结构名词解释 客户&#x2F;服务器体系协议结构包括一个总是运行着的服务器程序和许多有时运行的客户程序。客户进程是服务请求方，服务器进程是服务提供方。该体系结构的另一个特征为：服务器进程总是处于运行状态，并等待客户进程的服务请求。服务器进程具有固定的端口号，而运行服务器的主机也具有固定的IP地址 P2P体系结构名词解释 对等体系结构中没有固定的服务请求者和服务提供者，分布在网络中的应用进程是对等的，被成为对等方（有时将运行对等方软件的计算机也成为对等方）。对等方相互直接通信，每个对等方即是服务的请求者，又是服务的提供者 NAT名词解释： 又称“网络地址转换”，使大量内部专用地址的用户共享少量外部全球地址来访问互联网上的主机和资料。这种方法需要在专用网连接到互联网的路由器上运行NAT软件。运行NAT软件的路由器叫做NAT路由器，它至少有一个有效的外部全球地址$IP_{G}$。使所有使用本地地址的主机在和外界通信时都要在NAT路由器上将其本地地址转换成$IP_{G}$ 对称密钥密码体制名词解释: 对称密钥密码体制是一种加密密钥和解密密钥相同的密码体制，两个参与者共享同一个秘密密钥，如果用一个特定的密钥加密一套信息，就必须要用相同的密钥来解密该信息。该系统又称对称密钥系统 公钥密码体制名词解释： 公钥密码体制使用不同的加密密钥与解密密钥，加密密钥（公钥）PK是公开信息，而解密密钥（私钥）SK是需要保密的。 私钥SK由公钥PK决定，但不能由PK算出SK","categories":[{"name":"网络","slug":"网络","permalink":"http://hao-yv.github.io/category/%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"网络","slug":"网络","permalink":"http://hao-yv.github.io/tag/%E7%BD%91%E7%BB%9C/"},{"name":"期末","slug":"期末","permalink":"http://hao-yv.github.io/tag/%E6%9C%9F%E6%9C%AB/"}]},{"title":"MarkDown基本语法","slug":"markdown基本语法","date":"2024-02-14T15:23:48.000Z","updated":"2024-02-15T01:48:33.143Z","comments":true,"path":"article/18136/","link":"","permalink":"http://hao-yv.github.io/article/18136/","excerpt":"","text":"MarkDown基本语法 一级标题二级标题三级标题…… 六级标题粗体sudo doas 1代码块 链接文本 论点1 1.打法 wadnfniwajhf 3.ad ^2 删除线:joy: 无序论点1 无序论点2 无序论点3 无序子论点1 无需子论点2 无序三级子论点 无序四级子论点 论点1 论点2 有序子论点1 有序子论点2 有参三级 子论点1.有序四级子论点 表格： Column 1 Column 2 Column 3 centered 文本居左 centered2 文本居中 right-aligned 文本居右 文本1 文本2 文本3 特殊符号：空白符：&nbsp;(一个 &amp;nbsp; 相当于一个空格)换行符：(一个 &lt;br&gt; 相当于一个回车)$$x^{a}_{b}$$ [这是一段有注释的文字] [^1][^1]: 注释在这里","categories":[],"tags":[{"name":"文档","slug":"文档","permalink":"http://hao-yv.github.io/tag/%E6%96%87%E6%A1%A3/"}]},{"title":"Hello World","slug":"hello-world","date":"2024-02-13T03:42:10.391Z","updated":"2024-02-13T06:52:06.975Z","comments":true,"path":"article/16107/","link":"","permalink":"http://hao-yv.github.io/article/16107/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"计算机网络 - 传输层","slug":"计算机网络 - 传输层","date":"2020-09-20T16:00:00.000Z","updated":"2024-02-15T14:24:47.008Z","comments":true,"path":"article/4210326288/","link":"","permalink":"http://hao-yv.github.io/article/4210326288/","excerpt":"","text":"网络层只把分组发送到目的主机，但是真正通信的并不是主机而是主机中的进程。传输层提供了进程间的逻辑通信，传输层向高层用户屏蔽了下面网络层的核心细节，使应用程序看起来像是在两个传输层实体之间有一条端到端的逻辑通信信道。 UDP 和 TCP 的特点 用户数据报协议 UDP（User Datagram Protocol）是无连接的，尽最大可能交付，没有拥塞控制，面向报文（对于应用程序传下来的报文不合并也不拆分，只是添加 UDP 首部），支持一对一、一对多、多对一和多对多的交互通信。 传输控制协议 TCP（Transmission Control Protocol）是面向连接的，提供可靠交付，有流量控制，拥塞控制，提供全双工通信，面向字节流（把应用层传下来的报文看成字节流，把字节流组织成大小不等的数据块），每一条 TCP 连接只能是点对点的（一对一）。 UDP 首部格式 首部字段只有 8 个字节，包括源端口、目的端口、长度、检验和。12 字节的伪首部是为了计算检验和临时添加的。 TCP 首部格式 序号 ：用于对字节流进行编号，例如序号为 301，表示第一个字节的编号为 301，如果携带的数据长度为 100 字节，那么下一个报文段的序号应为 401。 确认号 ：期望收到的下一个报文段的序号。例如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此 B 期望下一个报文段的序号为 701，B 发送给 A 的确认报文段中确认号就为 701。 数据偏移 ：指的是数据部分距离报文段起始处的偏移量，实际上指的是首部的长度。 确认 ACK ：当 ACK&#x3D;1 时确认号字段有效，否则无效。TCP 规定，在连接建立后所有传送的报文段都必须把 ACK 置 1。 同步 SYN ：在连接建立时用来同步序号。当 SYN&#x3D;1，ACK&#x3D;0 时表示这是一个连接请求报文段。若对方同意建立连接，则响应报文中 SYN&#x3D;1，ACK&#x3D;1。 终止 FIN ：用来释放一个连接，当 FIN&#x3D;1 时，表示此报文段的发送方的数据已发送完毕，并要求释放连接。 窗口 ：窗口值作为接收方让发送方设置其发送窗口的依据。之所以要有这个限制，是因为接收方的数据缓存空间是有限的。 TCP 的三次握手 假设 A 为客户端，B 为服务器端。 首先 B 处于 LISTEN（监听）状态，等待客户的连接请求。 A 向 B 发送连接请求报文，SYN&#x3D;1，ACK&#x3D;0，选择一个初始的序号 x。 B 收到连接请求报文，如果同意建立连接，则向 A 发送连接确认报文，SYN&#x3D;1，ACK&#x3D;1，确认号为 x+1，同时也选择一个初始的序号 y。 A 收到 B 的连接确认报文后，还要向 B 发出确认，确认号为 y+1，序号为 x+1。 B 收到 A 的确认后，连接建立。 三次握手的原因 第三次握手是为了防止失效的连接请求到达服务器，让服务器错误打开连接。 客户端发送的连接请求如果在网络中滞留，那么就会隔很长一段时间才能收到服务器端发回的连接确认。客户端等待一个超时重传时间之后，就会重新请求连接。但是这个滞留的连接请求最后还是会到达服务器，如果不进行三次握手，那么服务器就会打开两个连接。如果有第三次握手，客户端会忽略服务器之后发送的对滞留连接请求的连接确认，不进行第三次握手，因此就不会再次打开连接。 TCP 的四次挥手 以下描述不讨论序号和确认号，因为序号和确认号的规则比较简单。并且不讨论 ACK，因为 ACK 在连接建立之后都为 1。 A 发送连接释放报文，FIN&#x3D;1。 B 收到之后发出确认，此时 TCP 属于半关闭状态，B 能向 A 发送数据但是 A 不能向 B 发送数据。 当 B 不再需要连接时，发送连接释放报文，FIN&#x3D;1。 A 收到后发出确认，进入 TIME-WAIT 状态，等待 2 MSL（最大报文存活时间）后释放连接。 B 收到 A 的确认后释放连接。 四次挥手的原因 客户端发送了 FIN 连接释放报文之后，服务器收到了这个报文，就进入了 CLOSE-WAIT 状态。这个状态是为了让服务器端发送还未传送完毕的数据，传送完毕之后，服务器会发送 FIN 连接释放报文。 TIME_WAIT 客户端接收到服务器端的 FIN 报文后进入此状态，此时并不是直接进入 CLOSED 状态，还需要等待一个时间计时器设置的时间 2MSL。这么做有两个理由： 确保最后一个确认报文能够到达。如果 B 没收到 A 发送来的确认报文，那么就会重新发送连接释放请求报文，A 等待一段时间就是为了处理这种情况的发生。 等待一段时间是为了让本连接持续时间内所产生的所有报文都从网络中消失，使得下一个新的连接不会出现旧的连接请求报文。 TCP 可靠传输TCP 使用超时重传来实现可靠传输：如果一个已经发送的报文段在超时时间内没有收到确认，那么就重传这个报文段。 一个报文段从发送再到接收到确认所经过的时间称为往返时间 RTT，加权平均往返时间 RTTs 计算如下： 其中，0 ≤ a ＜ 1，RTTs 随着 a 的增加更容易受到 RTT 的影响。 超时时间 RTO 应该略大于 RTTs，TCP 使用的超时时间计算如下： 其中 RTTd 为偏差的加权平均值。 TCP 滑动窗口窗口是缓存的一部分，用来暂时存放字节流。发送方和接收方各有一个窗口，接收方通过 TCP 报文段中的窗口字段告诉发送方自己的窗口大小，发送方根据这个值和其它信息设置自己的窗口大小。 发送窗口内的字节都允许被发送，接收窗口内的字节都允许被接收。如果发送窗口左部的字节已经发送并且收到了确认，那么就将发送窗口向右滑动一定距离，直到左部第一个字节不是已发送并且已确认的状态；接收窗口的滑动类似，接收窗口左部字节已经发送确认并交付主机，就向右滑动接收窗口。 接收窗口只会对窗口内最后一个按序到达的字节进行确认，例如接收窗口已经收到的字节为 {31, 34, 35}，其中 {31} 按序到达，而 {34, 35} 就不是，因此只对字节 31 进行确认。发送方得到一个字节的确认之后，就知道这个字节之前的所有字节都已经被接收。 TCP 流量控制流量控制是为了控制发送方发送速率，保证接收方来得及接收。 接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。 TCP 拥塞控制如果网络出现拥塞，分组将会丢失，此时发送方会继续重传，从而导致网络拥塞程度更高。因此当出现拥塞时，应当控制发送方的速率。这一点和流量控制很像，但是出发点不同。流量控制是为了让接收方能来得及接收，而拥塞控制是为了降低整个网络的拥塞程度。 TCP 主要通过四个算法来进行拥塞控制：慢开始、拥塞避免、快重传、快恢复。 发送方需要维护一个叫做拥塞窗口（cwnd）的状态变量，注意拥塞窗口与发送方窗口的区别：拥塞窗口只是一个状态变量，实际决定发送方能发送多少数据的是发送方窗口。 为了便于讨论，做如下假设： 接收方有足够大的接收缓存，因此不会发生流量控制； 虽然 TCP 的窗口基于字节，但是这里设窗口的大小单位为报文段。 1. 慢开始与拥塞避免发送的最初执行慢开始，令 cwnd &#x3D; 1，发送方只能发送 1 个报文段；当收到确认后，将 cwnd 加倍，因此之后发送方能够发送的报文段数量为：2、4、8 … 注意到慢开始每个轮次都将 cwnd 加倍，这样会让 cwnd 增长速度非常快，从而使得发送方发送的速度增长速度过快，网络拥塞的可能性也就更高。设置一个慢开始门限 ssthresh，当 cwnd &gt;&#x3D; ssthresh 时，进入拥塞避免，每个轮次只将 cwnd 加 1。 如果出现了超时，则令 ssthresh &#x3D; cwnd &#x2F; 2，然后重新执行慢开始。 2. 快重传与快恢复在接收方，要求每次接收到报文段都应该对最后一个已收到的有序报文段进行确认。例如已经接收到 M1 和 M2，此时收到 M4，应当发送对 M2 的确认。 在发送方，如果收到三个重复确认，那么可以知道下一个报文段丢失，此时执行快重传，立即重传下一个报文段。例如收到三个 M2，则 M3 丢失，立即重传 M3。 在这种情况下，只是丢失个别报文段，而不是网络拥塞。因此执行快恢复，令 ssthresh &#x3D; cwnd &#x2F; 2 ，cwnd &#x3D; ssthresh，注意到此时直接进入拥塞避免。 慢开始和快恢复的快慢指的是 cwnd 的设定值，而不是 cwnd 的增长速率。慢开始 cwnd 设定为 1，而快恢复 cwnd 设定为 ssthresh。 参考链接 计算机网络, 谢希仁 JamesF.Kurose, KeithW.Ross, 库罗斯, 等. 计算机网络: 自顶向下方法 [M]. 机械工业出版社, 2014. W.RichardStevens. TCP&#x2F;IP 详解. 卷 1, 协议 [M]. 机械工业出版社, 2006. Active vs Passive FTP Mode: Which One is More Secure? Active and Passive FTP Transfers Defined - KB Article #1138 Traceroute ping How DHCP works and DHCP Interview Questions and Answers What is process of DORA in DHCP? What is DHCP Server ? Tackling emissions targets in Tokyo What does my ISP know when I use Tor? Technology-Computer Networking[1]-Computer Networks and the Internet P2P 网络概述. Circuit Switching (a) Circuit switching. (b) Packet switching.","categories":[{"name":"网络","slug":"网络","permalink":"http://hao-yv.github.io/category/%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"网络","slug":"网络","permalink":"http://hao-yv.github.io/tag/%E7%BD%91%E7%BB%9C/"}],"author":"CyC2018"}],"categories":[{"name":"文档","slug":"文档","permalink":"http://hao-yv.github.io/category/%E6%96%87%E6%A1%A3/"},{"name":"软件工程","slug":"软件工程","permalink":"http://hao-yv.github.io/category/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"},{"name":"操作系统","slug":"操作系统","permalink":"http://hao-yv.github.io/category/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"前端","slug":"前端","permalink":"http://hao-yv.github.io/category/%E5%89%8D%E7%AB%AF/"},{"name":"HTML","slug":"前端/HTML","permalink":"http://hao-yv.github.io/category/%E5%89%8D%E7%AB%AF/HTML/"},{"name":"JDBC工具类","slug":"JDBC工具类","permalink":"http://hao-yv.github.io/category/JDBC%E5%B7%A5%E5%85%B7%E7%B1%BB/"},{"name":"Druids工具类","slug":"Druids工具类","permalink":"http://hao-yv.github.io/category/Druids%E5%B7%A5%E5%85%B7%E7%B1%BB/"},{"name":"网络","slug":"网络","permalink":"http://hao-yv.github.io/category/%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"文档","slug":"文档","permalink":"http://hao-yv.github.io/tag/%E6%96%87%E6%A1%A3/"},{"name":"sql","slug":"sql","permalink":"http://hao-yv.github.io/tag/sql/"},{"name":"网络","slug":"网络","permalink":"http://hao-yv.github.io/tag/%E7%BD%91%E7%BB%9C/"},{"name":"期末","slug":"期末","permalink":"http://hao-yv.github.io/tag/%E6%9C%9F%E6%9C%AB/"}]}
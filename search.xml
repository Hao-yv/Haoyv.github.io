<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>wen11专业版重置系统后安全中心无法打开处理方法</title>
      <link href="/article/90881e5b/"/>
      <url>/article/90881e5b/</url>
      
        <content type="html"><![CDATA[<p>在win11专业版系统重装的情况下打开安全中心时，可能会弹出“页面不可用”的弹框（如下图所示），这时由于win11专业版本身并没有<strong>安全中心</strong>这一功能，在系统重置时原有的安全中心被删除。可通过手动重装安全中心的方式解决</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/30d060d0b97c99d15c7893307c623f60.png"></p><p>通过键盘<span style="color:red"> win + r</span>打开windows系统的运行窗口,输入<span style="color:red">winver</span>查看并记住当前系统版本号</p><center class="half"><img src="https://img.picui.cn/free/2024/10/01/66fb96c2aab9a.png" width=400px/><img src="https://img.picui.cn/free/2024/10/01/66fb96de1628b.png" width=400px/></center><p>进入<a href="https://uupdump.net/">UUP dump网站</a> ，选在你电脑的系统版本号（以 <span style="color: red"><strong>23H2</strong></span>版本为例子）</p><p><img src="https://img.picui.cn/free/2024/10/01/66fb936a47646.png" alt="1727763472661.png"></p><p>选中后进入以下界面：<br><img src="https://img.picui.cn/free/2024/10/01/66fb950fb8cfe.png" alt="1727763909933.png"></p><p>点击对应版本号进入跳转页面后在<strong>搜索文件</strong>中输入<span style="color:red">Microsoft.SecHealthUI_8wekyb3d8bbwe.appx </span>之后点击搜索，并下载对应文件</p><p><img src="https://img.picui.cn/free/2024/10/01/66fb99d423e99.png" alt="1727765132385.png"><img src="https://img.picui.cn/free/2024/10/01/66fb9b4096009.png" alt="1727765497140.png"></p><p>文件下载时，可能会提示文件无法下载，此时可点击下载旁边的三个点，点击保留，选择<span style="color:red">仍然保留</span></p><p><img src="https://img.picui.cn/free/2024/10/01/66fb9c589ae34.png" alt="1727765777422.png"></p><p>下载成功后，为下载文件重命名，添加尾缀<span style="color:red"><strong>.appx</strong></span>，随后双击打开，点击重新安装，重新安装后即可打开安全中心</p><p><img src="https://img.picui.cn/free/2024/10/01/66fb9d85acf8b.png" alt="1727766078776.png"></p>]]></content>
      
      
      <categories>
          
          <category> 文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件工程</title>
      <link href="/article/7821ac43/"/>
      <url>/article/7821ac43/</url>
      
        <content type="html"><![CDATA[<h3 id="软件工程"><a href="#软件工程" class="headerlink" title="软件工程"></a>软件工程</h3><h4 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h4><p>软件工程：采用工程的概念、技术、原理和方法来开发与维护软件，以经济地开发出高质量的软件并有效地维护它<br>软件可靠性：软件产品在规定的条件下和规定的时间区间完成规定功能的能力<br>软件维护：对已经开发完成的软件进行修改，更新，优化和修复等工作的过程<br>内聚和耦合：内聚标志着模块内各个元素 彼此结合的紧密程度；耦合是软件节后内不同模块之间互联程度的度量<br>面向对象的消息：在面向对象编程中，对象之间通过消息来进行通信的一种方式<br>数据字典：描述数据的信息集合，是对系统中使用的所有数据元素的定义的集合<br>软件测试：软件投入运行前，对软件需求分析、设计规格说明和编码的最终复查<br>信息隐藏：设计和确定模块时，使得一个模块内包含的信息（过程和数据）对于不需要这些信息的模块来说是不能访问的<br>CMM：CMM是对于软件组织在定义、实施、度量、控制和改善其软件过程的实践中各个发展阶段的描述<br>软件：是计算机系统中与硬件相互依存的另一部分，包括程序、数据及其文档的完整集合<br>面向对象方法学：面向对象方法是一种以数据或信息为主线，把数据和处理相结合的方法，即把对象作为由数据及可以施加在这些数据上的操作所构成的统一体<br>软件过程：形成软件产品的一系列步骤，包括中间产品、资源、角色及过程中采取的方法、工具等范畴<br>软件配置项：软件产品开发和维护过程中所有有贡献的项</p><h4 id="简述题"><a href="#简述题" class="headerlink" title="简述题"></a>简述题</h4><h5 id="简述结构化范型和面向对象范型的要点，并分析他们的优缺点。"><a href="#简述结构化范型和面向对象范型的要点，并分析他们的优缺点。" class="headerlink" title="简述结构化范型和面向对象范型的要点，并分析他们的优缺点。"></a>简述结构化范型和面向对象范型的要点，并分析他们的优缺点。</h5><p>结构化范型<br>要点：采用生命周期方法学，以瀑布模型为主，强调各阶段任务独立、简单，易于分工协作。<br>优点：简化问题难度，程序简洁明了；<br>缺点：处理复杂问题有限制，不利于维护。<br>面向对象范型<br>要点：基于对象概念，将数据和操作封装在对象中，通过类和继承实现代码重用和扩展。<br>优点：思维符合人类习惯，易于理解和维护，可靠性高；<br>缺点：对开发人员抽象能力要求高，模块划分不合理会影响功能。</p><h5 id="简述决定软件可维护性的因素及为提高可维护性应该采取的措施。"><a href="#简述决定软件可维护性的因素及为提高可维护性应该采取的措施。" class="headerlink" title="简述决定软件可维护性的因素及为提高可维护性应该采取的措施。"></a>简述决定软件可维护性的因素及为提高可维护性应该采取的措施。</h5><ol><li>可理解性、可复用性、可修改性、可测试性、稳定性、可扩展性、文档完善性</li><li>遵循编码规范，保持代码整洁。<br> 使用清晰的命名和注释。<br> 采用模块化和面向对象设计。<br> 减少代码重复，提取公共逻辑。<br> 编写自动化测试。<br> 维护详尽的文档。<br> 定期进行代码审查。</li></ol><h5 id="简述软件工程的定义及软件工程的基本原理"><a href="#简述软件工程的定义及软件工程的基本原理" class="headerlink" title="简述软件工程的定义及软件工程的基本原理"></a>简述软件工程的定义及软件工程的基本原理</h5><ol><li>软件工程是指导计算机软件开发和维护的一门工程学科，采用工程的概念、原理、技术和方法来开发和与维护软件，把经过实践考验而证明正确的管理技术和当前能够得到最好的方法结合起来，以经济地开发出高质量的软件并有效维护</li><li>用分阶段的生命周期计划严格管理<br>坚持进行阶段评审<br>实行产品控制<br>采用现代程序设计技术<br>结果应能够清楚地审查<br>开发人员应少而精<br>承认不断改进软件工程实践的必要性</li></ol><h5 id="可行性研究的过程包括哪些主要步骤"><a href="#可行性研究的过程包括哪些主要步骤" class="headerlink" title="可行性研究的过程包括哪些主要步骤"></a>可行性研究的过程包括哪些主要步骤</h5><ol><li>复查系统规模和目标</li><li>研究目前正在使用的系统</li><li>导出新系统的高层逻辑模型</li><li>进一步定问题</li><li>导出和评价供选择的解法</li><li>推荐行动方针</li><li>草拟开发计划</li><li>书写文档提交审查</li></ol><h5 id="简述软件维护的定义及维护的类型"><a href="#简述软件维护的定义及维护的类型" class="headerlink" title="简述软件维护的定义及维护的类型"></a>简述软件维护的定义及维护的类型</h5><ol><li>软件维护是在软件已经交付使用后，为了改正错误或满足新的需要而修改软件的过程，是软件生命周期的最后一个阶段，其基本任务是保证软件在一个相当长的时期能够正常运行</li><li>改正性维护<br>适应性维护<br>完善性维护<br>预防性维护</li></ol><h5 id="简述软件工程中数据流图和数据字典的作用"><a href="#简述软件工程中数据流图和数据字典的作用" class="headerlink" title="简述软件工程中数据流图和数据字典的作用"></a>简述软件工程中数据流图和数据字典的作用</h5><p>数据流图（DFD）用于描述系统内数据流动、处理和存储的逻辑模型，通过图形化方式展示系统功能过程和数据流向。数据字典（DD）提供系统中使用的数据元素的详细定义和描述，包括数据项、数据属性、数据类型等，是集中的结构化文档或数据库。两者共同构成系统逻辑模型，提高可维护性</p><h5 id="为什么要进行需求分析？需求分析对软件系统有哪些综合要求"><a href="#为什么要进行需求分析？需求分析对软件系统有哪些综合要求" class="headerlink" title="为什么要进行需求分析？需求分析对软件系统有哪些综合要求"></a>为什么要进行需求分析？需求分析对软件系统有哪些综合要求</h5><ol><li>为了发现系统中可能存在的问题，以及确定系统必须完成的工作</li><li>功能需求、性能需求、可靠性需求、出错处理需求、接口需求、约束、逆向需求、未来可能提出的需求<br><font color=red><strong>（功、性、靠、出、口、束、逆、来）</strong></font></li></ol><h5 id="简述软件工程中数据流图和数据字典的作用-1"><a href="#简述软件工程中数据流图和数据字典的作用-1" class="headerlink" title="简述软件工程中数据流图和数据字典的作用"></a>简述软件工程中数据流图和数据字典的作用</h5><p>数据流图（DFD）用于表示数据流向和系统组件，数据字典（DD）定义数据元素并规范，共同构成系统的逻辑模型，二者缺一不可</p><h5 id="简述面向对象设计的启发规则"><a href="#简述面向对象设计的启发规则" class="headerlink" title="简述面向对象设计的启发规则"></a>简述面向对象设计的启发规则</h5><ol><li>设计结果应清晰易懂</li><li>一般-特殊结构的深度应当适当</li><li>设计简单的类</li><li>使用简单的协议</li><li>使用简单的服务</li><li>把设计变动减至最小</li></ol><h5 id="简述模块独立性的概念及度量模块独立性的标准"><a href="#简述模块独立性的概念及度量模块独立性的标准" class="headerlink" title="简述模块独立性的概念及度量模块独立性的标准"></a>简述模块独立性的概念及度量模块独立性的标准</h5><ol><li>模块独立性是指每个模块只完成系统要求的独立子功能，并且与其他模块的联系最少且接口最简单</li><li>衡量模块独立性的标准是耦合性和内聚性（<font color=red><strong>高内聚低耦合</strong></font>）</li></ol><h5 id="简述大型软件系统的测试过程的基本步骤"><a href="#简述大型软件系统的测试过程的基本步骤" class="headerlink" title="简述大型软件系统的测试过程的基本步骤"></a>简述大型软件系统的测试过程的基本步骤</h5><ol><li>模块测试</li><li>子系统测试</li><li>系统测试</li><li>验收测试</li><li>平行测试</li></ol><h5 id="简述系统总体设计中的启发式规则"><a href="#简述系统总体设计中的启发式规则" class="headerlink" title="简述系统总体设计中的启发式规则"></a>简述系统总体设计中的启发式规则</h5><ol><li>要提高软件的模块独立性</li><li>模块规则不宜过大</li><li>深度、宽度、扇入、扇出都应适当</li><li>作用域要在控制域内</li><li>要降低模块接口的复杂度</li><li>设计单入单出的模块</li><li>模块的功能要可预测，同时避免功能过分局限</li></ol><h5 id="简述软件需求分析阶段从哪些方面验证软件需求的正确性"><a href="#简述软件需求分析阶段从哪些方面验证软件需求的正确性" class="headerlink" title="简述软件需求分析阶段从哪些方面验证软件需求的正确性"></a>简述软件需求分析阶段从哪些方面验证软件需求的正确性</h5><ol><li>需求是否和用户所描述一致</li><li>需求是否获取完整</li><li>需求是否现实</li><li>需求是否有效解决客户问题</li><li>需求是否可以检验<br>（<font color=red><strong>一、完、有、现、可</strong></font>）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统</title>
      <link href="/article/d04bd5bc/"/>
      <url>/article/d04bd5bc/</url>
      
        <content type="html"><![CDATA[<h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><h4 id="简答部分"><a href="#简答部分" class="headerlink" title="简答部分"></a>简答部分</h4><h5 id="进程转换图"><a href="#进程转换图" class="headerlink" title="进程转换图"></a>进程转换图</h5><p><img src="https://img-blog.csdnimg.cn/20210113131240745.png" alt="https://img-blog.csdnimg.cn/20210113131240745.png"></p><h5 id="进程调度算法及思想"><a href="#进程调度算法及思想" class="headerlink" title="进程调度算法及思想"></a>进程调度算法及思想</h5><ol><li>先来先服务算法（FCFS）</li></ol><p>算法思想：从公平角度考虑，按照进程到达的先后顺序进行调度</p><ol start="2"><li>短作业优先算法（SJF）</li></ol><p>算法思想：使要求服务时间最短的进程优先得到服务，追求最少的平均等待时间，最少周转时间和最少平均带权周转时间</p><ol start="3"><li>高xiang y比优先算法（HRRN）</li></ol><p>算法思想：综合考虑进程的等待时间，每次进行调度时，先计算各个进程的相应比，选择相应比高的进程为其服务</p><h5 id="用户程序处理三阶段"><a href="#用户程序处理三阶段" class="headerlink" title="用户程序处理三阶段"></a>用户程序处理三阶段</h5><ol><li>编译：将用户源代码编译成若干目标模块</li><li>链接：将编译后形成的目标代码及他们所需库函数连接在一起，形成一个装入模块</li><li>装入：由装入程序将装入模块装入内存</li></ol><h5 id="用户文件按照用途分类"><a href="#用户文件按照用途分类" class="headerlink" title="用户文件按照用途分类"></a>用户文件按照用途分类</h5><ol><li>系统文件</li><li>库文件</li><li>用户文件</li></ol><h5 id="常用动态分区分配算法"><a href="#常用动态分区分配算法" class="headerlink" title="常用动态分区分配算法"></a>常用动态分区分配算法</h5><ol><li>首次适应算法</li><li>最佳适应算法</li><li>最坏适应算法</li><li>临近适应算法</li></ol><h5 id="公共缓冲池中缓冲区4种工作方式"><a href="#公共缓冲池中缓冲区4种工作方式" class="headerlink" title="公共缓冲池中缓冲区4种工作方式"></a>公共缓冲池中缓冲区4种工作方式</h5><ol><li>收容输入</li><li>提取输入</li><li>收容输出</li><li>提取输出</li></ol><h5 id="具有挂起状态的进程转换图"><a href="#具有挂起状态的进程转换图" class="headerlink" title="具有挂起状态的进程转换图"></a>具有挂起状态的进程转换图</h5><p><img src="https://img-blog.csdnimg.cn/20191101103135791.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0NjY2ODU3,size_16,color_FFFFFF,t_70#id=WhVnX&originHeight=748&originWidth=948&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h5 id="目标程序装入内存的方式"><a href="#目标程序装入内存的方式" class="headerlink" title="目标程序装入内存的方式"></a>目标程序装入内存的方式</h5><ol><li>绝对装入</li><li>可重定位装入</li><li>动态运行时装入</li></ol><h5 id="文件共享保护机制"><a href="#文件共享保护机制" class="headerlink" title="文件共享保护机制"></a>文件共享保护机制</h5><ol><li>口令保护：要求用户在访问文件时必须提供口令</li><li>密码保护：文件进行加密，在访问时需要提供正确的密码才能对文件进行正确的解密</li><li>访问控制：在每个文件的FCB中增加一个<strong>访问控制表ACL</strong>，记录各个用户可对该文件执行哪些操作</li></ol><h5 id="死锁产生必要条件"><a href="#死锁产生必要条件" class="headerlink" title="死锁产生必要条件"></a>死锁产生必要条件</h5><ol><li>互斥条件</li><li>不可剥夺条件</li><li>请求和保持条件</li><li>循环等待条件</li></ol><h5 id="磁盘调度算法"><a href="#磁盘调度算法" class="headerlink" title="磁盘调度算法"></a>磁盘调度算法</h5><ol><li>先来先服务算法</li><li>最短寻道时间优先算法</li><li>电梯算法</li><li>循环扫描算法</li></ol><h5 id="进程基本状态及其转换关系"><a href="#进程基本状态及其转换关系" class="headerlink" title="进程基本状态及其转换关系"></a>进程基本状态及其转换关系</h5><p>进程基本状态：就绪态、阻塞态、执行态</p><ol><li>处于就绪态的进程，当调度程序为其分配处理机后，变为执行态</li><li>处于执行态的进程，当系统为其分配的时间片用完后推出处理机，变为就绪态</li><li>处于执行态的进程，当其有用某种原因无法继续执行时，变为阻塞态</li><li>处于阻塞态的进程，当其等待事件完毕后，变为就绪态</li></ol><h5 id="程序链接方式"><a href="#程序链接方式" class="headerlink" title="程序链接方式"></a>程序链接方式</h5><ol><li>静态链接</li><li>装入时动态链接</li><li>运行时动态链接</li></ol><h5 id="死锁检测时发生死锁的检测方式"><a href="#死锁检测时发生死锁的检测方式" class="headerlink" title="死锁检测时发生死锁的检测方式"></a>死锁检测时发生死锁的检测方式</h5><ol><li>资源剥夺法</li><li>撤销进程法</li><li>进程回退法</li></ol><h5 id="操作系统为用户提供的接口"><a href="#操作系统为用户提供的接口" class="headerlink" title="操作系统为用户提供的接口"></a>操作系统为用户提供的接口</h5><ol><li>命令行接口</li><li>图形界面接口</li><li>应用程序编程接口</li></ol><h4 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h4><p>对换：系统把所有用户作业放入磁盘，每次只能调用一个作业到内存，作业完成时调至外存，再将外存的另一个作业调入<br>作业：用户在一次解题或一个事物处理过程中要求计算机所做所有工作的集合<br>缓冲区：指通信双方不直接通信，而是通过一个缓冲器中转<br>批处理系统：用户将作业提交给操作系统后不再干预，由操作系统控制他们自己运行<br>虚拟存储器：具有请求调出功能和置换功能，并能从逻辑上对空间进行扩容<br>实时操作系统：对信息进行实时处理的系统<br>原语：由若干条指令组成的程序段，用来实现某个功能，在程序执行过程中不可被中断<br>处理机调度：从就绪队列中按照一定算法选择一个进程，并将处理机分配给它运行<br>进程并发性：两个或多个事件在同一时间间隔内发生，这些事件在宏观上同时发生，但在微观上是交替发生的<br>文件控制块：操作系统为管理文件而设置的一组具有固定格式的数据结构，存放管理文件所需的所有属性信息<br>信号量：也叫做信号灯，它是在信号量同步机制中用于实现进程的同步和互斥的有效数据结构<br>重定位：链接地址跟运行地址不同的情况下，执行一段位置无关码</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML文档</title>
      <link href="/article/cb13802c/"/>
      <url>/article/cb13802c/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML文档"><a href="#HTML文档" class="headerlink" title="HTML文档"></a>HTML文档</h1><h2 id="1-HTML语法规范"><a href="#1-HTML语法规范" class="headerlink" title="1. HTML语法规范"></a>1. HTML语法规范</h2><h3 id="1-1-基本语法概述"><a href="#1-1-基本语法概述" class="headerlink" title="1.1 基本语法概述"></a>1.1 基本语法概述</h3><ol><li>HTML标签是由尖括号包围的关键词</li><li>HTML标签通常成对出现，例如 &lt;html&gt; 和 &lt;\html&gt;，称为<span style="color: red;"><em><strong>双标签</strong></em></span>，其中第一个为开始标签，第二个为结束标签</li><li>有些特殊标签必须是单个标签（极少情况），如  &lt;br&gt;，称为<span style="color: red;"><em><strong>单标签</strong></em></span></li></ol><h3 id="1-2-标签关系"><a href="#1-2-标签关系" class="headerlink" title="1.2 标签关系"></a>1.2 标签关系</h3><p>标签分为两类，分别为<span style="color: red;"><strong>并列关系</strong></span>和<span style="color: red;"><strong>包含关系</strong></span></p><p>包含关系：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><p>并列关系：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-HTML-基本结构标签"><a href="#2-HTML-基本结构标签" class="headerlink" title="2 HTML 基本结构标签"></a>2 HTML 基本结构标签</h2><h3 id="2-1-第一个HTML"><a href="#2-1-第一个HTML" class="headerlink" title="2.1 第一个HTML"></a>2.1 第一个HTML</h3><table><thead><tr><th align="center">标签名</th><th align="center">定义</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">&lt;html&gt; &lt;&#x2F;html&gt;</td><td align="center">HTML标签</td><td align="left">页面中最大的标签，称为 根标签</td></tr><tr><td align="center">&lt;head&gt; &lt;&#x2F;head&gt;</td><td align="center">文档的头部</td><td align="left">在head标签中必须要设置title标签</td></tr><tr><td align="center">&lt;title&gt; &lt;&#x2F;title&gt;</td><td align="center">文档的标题</td><td align="left">让页面拥有一个属于自己的网页标题</td></tr><tr><td align="center">&lt;body&gt; &lt;&#x2F;body&gt;</td><td align="center">文档的主体</td><td align="left">元素包含文档的所有内容，页面内容基本都是放到 body标签 里面</td></tr></tbody></table><h2 id="3-网页开发工具"><a href="#3-网页开发工具" class="headerlink" title="3 网页开发工具"></a>3 网页开发工具</h2><h3 id="3-1-文档类型声明标签"><a href="#3-1-文档类型声明标签" class="headerlink" title="3.1 文档类型声明标签"></a>3.1 文档类型声明标签</h3><p><strong>&lt;!DOCTYPE&gt;</strong> 文档转换声明，作用是告诉浏览器用哪种版本的HTML来显示网页</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol><li>&lt;!DOCTYPE&gt; 声明位于文档中的最前面位置，处于 &lt;html&gt;</li><li>&lt;!DOCTYPE&gt;不是一个HTML标签，是文档类型声明标签</li></ol><h3 id="3-2-lang-语言种类"><a href="#3-2-lang-语言种类" class="headerlink" title="3.2 lang 语言种类"></a>3.2 lang 语言种类</h3><p>用来定义当前文档显示语言</p><ol><li>en定义语言为英语</li><li>zh-CN定义语言为中文<br>对于文档显示来说，定义成en可以显示中文，定义成zh-CN也可以显示英文</li></ol><h3 id="3-3-字符集"><a href="#3-3-字符集" class="headerlink" title="3.3 字符集"></a>3.3 字符集</h3><p>字符集（Character set）是多个字符的集合，以便计算机能够识别和存储各种文字。<br>在 &lt;head&gt; 标签内，可以通过 &lt;meta&gt; 标签的 charset 属性来规定HTML文档应该使用哪种文字编码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;meta charset=&quot;UTF-8&quot;&gt;<br></code></pre></td></tr></table></figure><p>charset常有的值有: GB2312、BIG5、GBK 和 UTF-8，其中<span style="color: red;">UTF-8</span>也被称为<span style="color: red;">万国码</span>，基本包含了全世界所有国家常用的字符</p><p><strong>注意：</strong><br>一般情况下，统一使用”UTF-8”编码，尽量写成标准的”UTF-8”,不要写成 “utf8” 或 “UTF8”</p><h2 id="4-HTML-常用标签"><a href="#4-HTML-常用标签" class="headerlink" title="4. HTML 常用标签"></a>4. HTML 常用标签</h2><h3 id="4-1-标题标签"><a href="#4-1-标题标签" class="headerlink" title="4.1 标题标签(&lt;h1&gt; - &lt;h6&gt;)"></a>4.1 标题标签(&lt;h1&gt; - &lt;h6&gt;)</h3><p>为了使网页更具有语义化，经常在页面中用到标题标签，HTML 提供了6个等级的网页标题，即&lt;h1&gt; ~ &lt;h6&gt;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;h1&gt;一级标题&lt;/h1&gt;<br>  &lt;h2&gt;二级标题&lt;/h2&gt;<br>    ...<br>            &lt;h6&gt;六级标题&lt;/h6&gt;<br></code></pre></td></tr></table></figure><p>h为单词 head 的缩写，意味头部，标题</p><p><span style="color: red;">标签语义：</span>作用为标题使用，并且依次根据重要性递减</p><p><strong>特点：</strong></p><ol><li>加了标题的文字会变得加粗，字号也会依次变大</li><li>一个标题独占一行</li></ol><h3 id="4-2-段落和换行标签"><a href="#4-2-段落和换行标签" class="headerlink" title="4.2 段落和换行标签"></a>4.2 段落和换行标签</h3><p>在网页中，要把文字有条理地显示出来，就要将这些文字分段。在 HTML 标签中，&lt;p&gt; 标签用于定义段落，它可以将整个网页分为若干短路</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;p&gt;段落标签&lt;/p&gt;<br></code></pre></td></tr></table></figure><p>单词 paragraph 的缩写，意味 段落<br><span style="color: red;">标签语义：</span>可以把 HTML 文档分割为若干段落</p><p><strong>特点：</strong></p><ol><li>文本在一个段落中会根据浏览器自动换行</li><li>段落和段落之间保有空隙</li></ol><p>在HTML中，一个段落中的文字会从左到右排列直到浏览器窗口右端，然后才自动换行，如果需要某段文本强制换行，就需要&lt;br&gt;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;br&gt;<br></code></pre></td></tr></table></figure><p>单词：break的缩写，意为打断，换行<br><span style="color: red;">标签语义：</span>强制换行</p><p><strong>特点：</strong></p><ol><li>&lt;br&gt;是个单标签</li><li>&lt;br&gt;标签只是签单地开启新的一行，和段落不同，段落之间会插入一些垂直行距</li></ol><h3 id="4-3-文本格式化标签"><a href="#4-3-文本格式化标签" class="headerlink" title="4.3 文本格式化标签"></a>4.3 文本格式化标签</h3><p>在网页中，有时需要为文字设置 <span style="color: red;"><strong>粗体</strong></span>，<span style="color: red;"><em>斜体</em></span> 或 <span style="color: red;"><ins>下划线</ins></span> 效果,这时就需要用到HTML中的文本化标签，使用以特殊的方式显示</p><p><span style="color: red;">标签语义：</span>突出重要性，比普通文字更重要</p><table><thead><tr><th align="center">语义</th><th align="center">标签</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">加粗</td><td align="center">&lt;strong&gt; &lt;&#x2F;strong&gt;或者&lt;b&gt; &lt;&#x2F;b&gt;</td><td align="center">更推荐用&lt;strong&gt;标签 语义更强烈</td></tr><tr><td align="center">倾斜</td><td align="center">&lt;em&gt; &lt;&#x2F;em&gt; 或者 &lt;i&gt; &lt;&#x2F;i&gt;</td><td align="center">更推荐用 &lt;em&gt; 标签，语义更强烈</td></tr><tr><td align="center">删除线</td><td align="center">&lt;del&gt; &lt;&#x2F;del&gt;或者 &lt;s&gt; &lt;&#x2F;s&gt;</td><td align="center">更推荐用&lt;del&gt;标签，语义更强烈</td></tr><tr><td align="center">下划线</td><td align="center">&lt;ins&gt; &lt;&#x2F;ins&gt;或者&lt;u&gt; &lt;&#x2F;u&gt;</td><td align="center">更推荐用&lt;ins&gt;标签，语义更强烈</td></tr></tbody></table><h3 id="4-4-文本格式化标签"><a href="#4-4-文本格式化标签" class="headerlink" title="4.4 文本格式化标签"></a>4.4 文本格式化标签</h3><p>&lt;div&gt; 和 &lt;span&gt; 是没有语义的，就是一个盒子，用来装内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;div&gt; 这是一个盒子 &lt;/div&gt;<br>&lt;span&gt;这也是一个盒子&lt;/span&gt;<br></code></pre></td></tr></table></figure><p>div 是 division 的缩写，表示分割，分区<br>span 意味跨度，跨越</p><p><strong>特点：</strong></p><ol><li>&lt;div&gt; 标签用来布局，但一行只能放一个 &lt;div&gt;，可视作一个大盒子</li><li>&lt;span&gt; 标签用来布局，一行可以放多个&lt;span&gt;，可视作一个小盒子</li></ol><h3 id="4-5-图像的标签和路径"><a href="#4-5-图像的标签和路径" class="headerlink" title="4.5 图像的标签和路径"></a>4.5 图像的标签和路径</h3><h4 id="4-5-1-图像标签"><a href="#4-5-1-图像标签" class="headerlink" title="4.5.1 图像标签"></a>4.5.1 图像标签</h4><p>在HTML 标签中， &lt;img&gt;标签用于定义HTML页面的图像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;img src = &quot;图像url&quot;&gt;<br></code></pre></td></tr></table></figure><p>img 为单词 img 的缩写，意为图像<br>src 是&lt;img&gt;标签 的<span style="color: red;">必须属性</span>，用于<span style="color: red;">指定图像文件的路径和文件名</span></p><table><thead><tr><th align="center">属性</th><th align="center">属性值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">src</td><td align="center">图片路径</td><td align="center">必须属性</td></tr><tr><td align="center">alt</td><td align="center">文本</td><td align="center">替换文本，图像不能显示时显示的文字</td></tr><tr><td align="center">title</td><td align="center">文本</td><td align="center">提示文本，鼠标放在图像上时显示的文字</td></tr><tr><td align="center">width</td><td align="center">像素</td><td align="center">设置图像的宽度</td></tr><tr><td align="center">height</td><td align="center">像素</td><td align="center">设置图像的高度</td></tr><tr><td align="center">border</td><td align="center">像素</td><td align="center">设置图像的边框粗细</td></tr></tbody></table><p>图像标签属性注意点：</p><ul><li>图像标签可以拥有多个属性，必须写在标签名后面</li><li>属性之间不分先后顺序，标签名与属性，属性和属性之间均以空格分开</li><li>实行采取键值对的格式，即 key &#x3D; “value” 的格式，属性 &#x3D; “ 属性值 ”</li></ul><h4 id="4-5-2-路径"><a href="#4-5-2-路径" class="headerlink" title="4.5.2 路径"></a>4.5.2 路径</h4><p>路径整体可分为<strong>绝对路径</strong>和<strong>相对路径</strong>两类<br><span style="color: red;">相对路径：</span>以引用文件所在位置为参考基础而建立的目录路径，简单来说就是图片相对于HTML页面的位置</p><table><thead><tr><th align="center">相对路径分类</th><th align="center">符号</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">同一级路径</td><td align="center"></td><td align="center">图像文件位于HTML文件同一级</td></tr><tr><td align="center">下一级路径</td><td align="center">&#x2F;</td><td align="center">图像位于HTML文件的下一级</td></tr><tr><td align="center">上一级路径</td><td align="center">..&#x2F;</td><td align="center">图像位于HTML文件的上一级</td></tr></tbody></table><p><span style="color: red;">绝对路径：</span>指目录下的绝对位置，直接到达目标位置，通常是从盘符开始的路径</p><h3 id="4-6-超链接标签"><a href="#4-6-超链接标签" class="headerlink" title="4.6 超链接标签"></a>4.6 超链接标签</h3><p>在HTML标签中，&lt;a&gt;标签 用于定义超链接，作用是从一个页面链接到另一个页面</p><h3 id="4-6-1-链接的语法格式"><a href="#4-6-1-链接的语法格式" class="headerlink" title="4.6.1 链接的语法格式"></a>4.6.1 链接的语法格式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;a href = &quot;跳转目标&quot; target = &quot;目标窗口的弹出方式&quot;&gt; 文本或图像 &lt;/a&gt; <br></code></pre></td></tr></table></figure><p>a 为单词 anchor 的缩写，意味 “ 锚点 “</p><table><thead><tr><th align="center">属性</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">href</td><td align="center">作用指定连接目标的url地址，（必须属性）为当前标签应用 href 属性时，它就有了超链接功能</td></tr><tr><td align="center">target</td><td align="center">用于指定链接页面的打开方式，其中_self为默认值，_blank为在新窗口中的打开方式</td></tr></tbody></table><h4 id="4-6-2-链接分类"><a href="#4-6-2-链接分类" class="headerlink" title="4.6.2 链接分类"></a>4.6.2 链接分类</h4><ol><li>外部链接</li><li>内部链接：网站内部页面之间的相互链接，直接连接内部页面名称即可</li><li>空链接：如果当时确定链接目标时，&lt;a href &#x3D; “#”&gt;首页&lt;&#x2F;a&gt;</li><li>下载链接：如果href里面的地址时一个文件或者压缩包，会直接进行下载</li><li>网页元素链接：在网页中的各种网页元素，如文本，图像，表格，音频，视频等都可以添加超链接</li><li>锚点链接：点击链接时可快速到达页面中的某个位置<ul><li>在链接文本的href属性中，设置属性值为 <span style="color: red;">#名字</span> 的形式</li><li>找到目标位置标签，里面添加一个id属性 &#x3D; 刚才的名字</li></ul></li></ol><h2 id="5-HTML-注释和特殊字符"><a href="#5-HTML-注释和特殊字符" class="headerlink" title="5 HTML 注释和特殊字符"></a>5 HTML 注释和特殊字符</h2><h3 id="5-1-注释"><a href="#5-1-注释" class="headerlink" title="5.1 注释"></a>5.1 注释</h3><p>如果需要在HTML文档中添加一些便于阅读和理解但又不需要显示在页面中的文字，就需要使用注释标签<br>HTML中的<span style="color: red;">以”&lt;!– 开头”， 以 “\ –&gt;”结束</span></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;!-- 注释语句 --&gt;<br>快捷键为：ctrl + / <br></code></pre></td></tr></table></figure><p>添加注释是为了更好地解释代码的功能，便于开发人员理解和阅读代码，程序是不会执行注释内容的</p><h3 id="5-2-特殊字符"><a href="#5-2-特殊字符" class="headerlink" title="5.2 特殊字符"></a>5.2 特殊字符</h3><table><thead><tr><th align="center">特殊符号</th><th align="center">描述</th><th align="center">字符代码</th></tr></thead><tbody><tr><td align="center"></td><td align="center">空格符</td><td align="center">&amp;nbsp;</td></tr><tr><td align="center">&lt;</td><td align="center">小于号</td><td align="center">&lt;</td></tr><tr><td align="center">&gt;</td><td align="center">大于号</td><td align="center">&amp;gt;</td></tr><tr><td align="center">&amp;</td><td align="center">和号</td><td align="center">&amp;amp;</td></tr><tr><td align="center">￥</td><td align="center">人民币</td><td align="center">\yen;</td></tr><tr><td align="center">©</td><td align="center">版权</td><td align="center">&amp;copy;</td></tr><tr><td align="center">®</td><td align="center">注册商标</td><td align="center">&amp;reg;</td></tr><tr><td align="center">°</td><td align="center">摄氏度</td><td align="center">&amp;deg;</td></tr><tr><td align="center">±</td><td align="center">正负号</td><td align="center">&amp;plusmn;</td></tr><tr><td align="center">×</td><td align="center">乘号</td><td align="center">&amp;times;</td></tr><tr><td align="center">÷</td><td align="center">除号</td><td align="center">&amp;divide;</td></tr><tr><td align="center">²</td><td align="center">平方2（上标2）</td><td align="center">&amp;sup2;</td></tr></tbody></table><h2 id="6-表格标签"><a href="#6-表格标签" class="headerlink" title="6 表格标签"></a>6 表格标签</h2><h3 id="6-1-表格的主要作用"><a href="#6-1-表格的主要作用" class="headerlink" title="6.1 表格的主要作用"></a>6.1 表格的主要作用</h3><p>表格主要用于显示数据，展示数据，因为它可以让数据显示的非常规整，增强可读性，表格不是用来布局页面的，而是用来显示数据的</p><h3 id="6-2-表格基本语法"><a href="#6-2-表格基本语法" class="headerlink" title="6.2 表格基本语法"></a>6.2 表格基本语法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>单元格内的文字<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        ...<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li>&lt;table&gt; &lt;&#x2F;table&gt;标签 是用于定义表格的标签</li><li>&lt;tr&gt; &lt;&#x2F;tr&gt;标签 用于定义表格中的行， 必须嵌套在&lt;table&gt; &lt;&#x2F;table&gt;标签 中</li><li>&lt;td&gt; &lt;&#x2F;td&gt; 标签用于定义表格中的单元格，必须嵌套&lt;tr&gt; &lt;&#x2F;tr&gt;标签中</li><li>字母 td 指表格数据 (table table), 即数据单元格的内容</li></ol><h3 id="6-3-表头单元格标签"><a href="#6-3-表头单元格标签" class="headerlink" title="6.3 表头单元格标签"></a>6.3 表头单元格标签</h3><p>表头单元格也是单元格，一般位于表格的第一行或第一列，表头单元格里面的文本内容加粗居中显示</p><p>&lt;th&gt;标签 用于HTML表格的表头部分(table head)的缩写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>表头<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>   ......<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>   ......<br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="6-4-表格属性"><a href="#6-4-表格属性" class="headerlink" title="6.4 表格属性"></a>6.4 表格属性</h3><p>表格属性需要写到表格标签&lt;table&gt; 里面去</p><table><thead><tr><th align="center">属性名</th><th align="center">属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">align</td><td align="center">left,center,right</td><td align="center">规定表格相对周围元素的对其方式</td></tr><tr><td align="center">border</td><td align="center">1 或 “ “</td><td align="center">规定表格单元之间是否拥有边框，默认为 “ “ ,表示没有边框</td></tr><tr><td align="center">cellpadding</td><td align="center">像素值</td><td align="center">规定单元边沿与其内容之间的空白，默认1像素</td></tr><tr><td align="center">cellspacing</td><td align="center">像素值</td><td align="center">规定单元格之间的空白，默认1像素</td></tr><tr><td align="center">width</td><td align="center">像素值或百分比</td><td align="center">规定表格的宽度</td></tr><tr><td align="center">height</td><td align="center">像素或百分比</td><td align="center">规定表格的高度</td></tr></tbody></table><h3 id="6-5-表格结构标签"><a href="#6-5-表格结构标签" class="headerlink" title="6.5 表格结构标签"></a>6.5 表格结构标签</h3><p>当表格过长时，为了更好的表示表格语义，将表格分割成表格头部和表格主体两大部分。在表格标签中，分别用：&lt;thead&gt;标签 表示表格头部区域  &lt;tbody&gt;标签 表示表格的主体区域。这样更好地分清表格结构</p><ol><li>&lt;&#x2F;thread&gt; &lt;&#x2F;thread&gt;标签：用于定义表格头部。&lt;thread&gt;内部必须拥有&lt;tr&gt;标签。一般位于第一行</li><li>&lt;tbody&gt; &lt;&#x2F;tbody&gt;标签：用于定义表格的主体，主要用于存放数据本体</li><li>以上标签全部放于&lt;table&gt; &lt;&#x2F;table&gt;标签中</li></ol><h3 id="6-6-合并单元格"><a href="#6-6-合并单元格" class="headerlink" title="6.6 合并单元格"></a>6.6 合并单元格</h3><p><strong>跨行合并：</strong> 以上侧单元格为目标单元格，写合并代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">rowspan = &quot;合并单元格的个数&quot;<br></code></pre></td></tr></table></figure><p><strong>跨列合并：</strong> 以左侧单元格为目标单元格，写合并代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">colspan = &quot;合并单元格个数&quot;<br></code></pre></td></tr></table></figure><p><strong>和并单元格3步：</strong></p><ol><li>确定单元格合并方式</li><li>找到目标单元格，写合并代码</li><li>删除多余单元格</li></ol><h2 id="7-列表标签"><a href="#7-列表标签" class="headerlink" title="7 列表标签"></a>7 列表标签</h2><h3 id="7-1-无序列表"><a href="#7-1-无序列表" class="headerlink" title="7.1 无序列表"></a>7.1 无序列表</h3><p>&lt;ul&gt;标签表示 HTML 页面中项目的无序列表，一般以项目符号呈现列表项，而列表项使用 &lt;li&gt;标签 定义。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>...<br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li>无序列表的各个列表项之间没有顺序之分，是并列的</li><li>&lt;ul&gt; &lt;&#x2F;ul&gt;中只能直接嵌套 &lt;li&gt;标签 ,不能直接嵌套其他标签</li><li>&lt;li&gt; &lt;&#x2F;li&gt;之间相当于一个容器，可以容纳所有元素</li></ol><h3 id="7-2-有序列表"><a href="#7-2-有序列表" class="headerlink" title="7.2 有序列表"></a>7.2 有序列表</h3><p>有序列表即为有顺序排列的列表，其各个列表项会按照一定的顺序排列定义</p><p>在HTML标签中，&lt;ol&gt;标签 用于定义有序列表，列表排序以数字来显示，并且使用&lt;li&gt;标签来定义列表项</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>...<br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li>&lt;ul&gt; &lt;&#x2F;ul&gt;中只能直接嵌套 &lt;li&gt;标签 ,不能直接嵌套其他标签</li><li>&lt;li&gt; &lt;&#x2F;li&gt;之间相当于一个容器，可以容纳所有元素</li></ol><h3 id="7-3-自定义列表"><a href="#7-3-自定义列表" class="headerlink" title="7.3 自定义列表"></a>7.3 自定义列表</h3><p>自定义列表常用于对术语或名词的解释和描述，定义列表的列表项前没有任何符号</p><p>在HTML标签中， <strong>&lt;dt&gt;</strong> 标签用于定义描述列表（或定义列表），该标签与 <strong>&lt;dd &gt;</strong> （描述每一个项目&#x2F;名字）一起使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>名词1<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>名词1解释1<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>名词1解释2<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="7-4-列表总结"><a href="#7-4-列表总结" class="headerlink" title="7.4 列表总结"></a>7.4 列表总结</h3><table><thead><tr><th align="center">标签名</th><th align="center">定义</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">&lt;ul&gt; &lt;&#x2F;ul&gt;</td><td align="center">无序标签</td><td align="center">里面只能包含&lt;li&gt; 没有顺序，使用频率较高。&lt;li&gt;里面可与包函任何标签</td></tr><tr><td align="center">&lt;ol&gt; &lt;&#x2F;ol&gt;</td><td align="center">有序标签</td><td align="center">里面只能包含&lt;li&gt; 有顺序，使用频率较低。&lt;li&gt;里面可与包函任何标签</td></tr><tr><td align="center">&lt;dl&gt; &lt;&#x2F;dl&gt;</td><td align="center">自定义标签</td><td align="center">里面只能包含 &lt;dt&gt; 和 &lt;dd&gt; ，&lt;dt&gt; 和 &lt;dd&gt;里面可以放任何标签</td></tr></tbody></table><h2 id="8-表单标签"><a href="#8-表单标签" class="headerlink" title="8. 表单标签"></a>8. 表单标签</h2><p>在HTML中，一个完整的表单通常由<font color = red>表单域，表单控件（也称表单元素）</font>和<font color = red>提示信息</font>三个部分构成</p><h3 id="8-1-表单域"><a href="#8-1-表单域" class="headerlink" title="8.1 表单域"></a>8.1 表单域</h3><p>表单域是一个包含表单元素的区域</p><p>在HTML标签中，&lt;from&gt;标签用于定义表单域，以实现用户信息的收集和传递。</p><p>&lt;from&gt;会把它范围内的表单元素信息提交给服务器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span> = <span class="hljs-string">&quot;url地址&quot;</span> <span class="hljs-attr">methed</span> = <span class="hljs-string">&quot;提交方式&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;表单域名称&quot;</span>&gt;</span><br>各种表单域控件<br><span class="hljs-tag">&lt;/<span class="hljs-name">fotm</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>常用属性：</strong></p><table><thead><tr><th align="center">属性</th><th align="center">属性值</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">action</td><td align="center">url地址</td><td align="center">用于指定接受并处理表单数据的服务器程序的url地址</td></tr><tr><td align="center">method</td><td align="center">get&#x2F;post</td><td align="center">用于设置表单数据的提交方式，其取值为get或post</td></tr><tr><td align="center">name</td><td align="center">名称</td><td align="center">用于指定表单的名称，以区分同一个页面中的多个表单域</td></tr></tbody></table><ol><li>写表单元素之前，应该有个表单域把他们进行包含</li><li>表单域是 &lt;form&gt; 标签</li></ol><h3 id="8-2-输入表单元素"><a href="#8-2-输入表单元素" class="headerlink" title="8.2 &lt;input&gt; 输入表单元素"></a>8.2 &lt;input&gt; 输入表单元素</h3><p>表单元素中，&lt;input&gt;标签用于收集用户信息</p><p>在&lt;input&gt;标签中，包含一个<font color = red><strong>type</strong></font>属性，根据不同的<font color = red><strong>type</strong></font>属性值，输入前端拥有很多种形式（可以是文本字段、复选框、掩码后的文本控件、单位按钮、按钮等）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;属性值&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>&lt;input&gt;标签为单标签</li><li>type属性设置不同的属性值用来指定不同的控件类型</li></ul><p><strong>type属性的属性值及其描述</strong></p><table><thead><tr><th align="center">属性值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">button</td><td align="left">定义可点击按钮(多数情况下，用于通过JavaScript启动脚本)</td></tr><tr><td align="center">checkbox</td><td align="left">定义复选框</td></tr><tr><td align="center">file</td><td align="left">定义输入字段和 “ 浏览 ”按钮，供文件上传</td></tr><tr><td align="center">hidden</td><td align="left">定义隐藏的输入字段</td></tr><tr><td align="center">image</td><td align="left">定义图像形式的提交按钮</td></tr><tr><td align="center">password</td><td align="left">定义密码字段，该字段中的字符被掩码</td></tr><tr><td align="center">radio</td><td align="left">定义单选按钮</td></tr><tr><td align="center">reset</td><td align="left">定义重置按钮，重置按钮会清除表单中的所有数据</td></tr><tr><td align="center">submit</td><td align="left">定义提交按钮，提交按钮会把表单数据发送到服务器</td></tr><tr><td align="center">text</td><td align="left">定义单行的输入字段，用户可在其中输入文本。默认宽度为 20 字符</td></tr></tbody></table><p>除type属性外，&lt;input&gt;标签中还有其他很多属性，常用属性如下：</p><table><thead><tr><th align="center">属性</th><th align="center">属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">name</td><td align="center">由用户自定义</td><td align="center">定义input元素名称</td></tr><tr><td align="center">value</td><td align="center">由用户自定义</td><td align="center">规定input元素的值</td></tr><tr><td align="center">checked</td><td align="center">checked</td><td align="center">规定input元素首次加载时应当被选中</td></tr><tr><td align="center">maxlength</td><td align="center">正整数</td><td align="center">规定输入字段中的字符的最大长度</td></tr></tbody></table><ol><li><p>name 和 value 是每个表单元素都有的属性值，主要给后台人员使用</p></li><li><p>name 表单元素的名字， 要求 <font color = red><strong>单选按钮和复选框要有相同的name值</strong></font></p></li></ol><h3 id="8-3-标签"><a href="#8-3-标签" class="headerlink" title="8.3 &lt;label&gt;标签"></a>8.3 &lt;label&gt;标签</h3><p><font color = "red">**&lt;label&gt; **</font>标签为input元素定义标注（标签）</p><p><font color = "red">**&lt;label&gt; **</font>标签用于绑定一个表单元素，当点击<font color = "red">&lt;label&gt; </font>标签时，浏览器会自动将焦点（光标）转到或者选择对应的表单元素上，用来增加用户体验</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;forid&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;type&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">name</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;forid&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>&lt;label&gt;标签的<font color = "red"><strong>for属性</strong></font>应当与相关元素的<font color = "red"><strong>id属性</strong></font>相同</p><h3 id="8-4-下拉表单元素"><a href="#8-4-下拉表单元素" class="headerlink" title="8.4 &lt;select&gt;下拉表单元素"></a>8.4 &lt;select&gt;下拉表单元素</h3><p>在页面中，如果有多个选项让用户选择，并且想要节约页面空间时，可以使用<font color = "red"><strong>&lt;select&gt;</strong></font>标签控件定义<font color = "red"><strong>下拉列表</strong></font></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>选项1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>选项2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>选项3<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    ...<br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>选项n<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li>在&lt;select&gt;中至少包含一对&lt;option&gt;</li><li>在&lt;option&gt;中定义 selected&#x3D;”selected”时，当前项即为默认选中项</li></ol><h3 id="8-5-文本域表单元素"><a href="#8-5-文本域表单元素" class="headerlink" title="8.5 &lt;textarea&gt;文本域表单元素"></a>8.5 &lt;textarea&gt;文本域表单元素</h3><p>当输入内容较多的情况下，使用&lt;textarea&gt;标签</p><p>在表单元素中，&lt;textarea&gt;标签是用于定义多行文本输入的控件</p><p>使用多行文本输入控件，可以输入更多的文字，常用于留言板、评论等</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot; &quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot; &quot;</span>&gt;</span><br>文本内容<br><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li>通过&lt;textarea&gt;标签可以轻松创建多行文本输入框</li><li>cols&#x3D;”每行中的字符数”， rows&#x3D;”显示的行数”，<font color = "red">实际开发中，一般通过CSS来改变大小</font></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC文档</title>
      <link href="/article/4c4e7025/"/>
      <url>/article/4c4e7025/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC文档"><a href="#JDBC文档" class="headerlink" title="JDBC文档"></a>JDBC文档</h1><h2 id="Mysql配置文件"><a href="#Mysql配置文件" class="headerlink" title="Mysql配置文件"></a>Mysql配置文件</h2><p>mysql.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">driver</span> = <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/数据库名?useUnicode=true&amp;characterEncoding=utf8</span><br><span class="hljs-attr">username</span>=<span class="hljs-string">username</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">password</span><br></code></pre></td></tr></table></figure><h2 id="JDBC工具类"><a href="#JDBC工具类" class="headerlink" title="JDBC工具类"></a>JDBC工具类</h2><p>  JDBC工具类将JDBC连接池的常用方法进行封装，使用时直接导入即可，无序重复多次写，提高代码复用性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Jutils</span> &#123;<br>    <span class="hljs-comment">// 定义相关属性</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String user;     <span class="hljs-comment">// 用户名</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String password; <span class="hljs-comment">// 密码</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String url;      <span class="hljs-comment">// url</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String driver;   <span class="hljs-comment">// 驱动名</span><br><br>    <span class="hljs-comment">// 代码块初始化配置文件</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;src\\mysql.properties&quot;</span>));<br>            user = properties.getProperty(<span class="hljs-string">&quot;username&quot;</span>);<br>            password = properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>            url = properties.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br>            driver = properties.getProperty(<span class="hljs-string">&quot;driver&quot;</span>);<br>            Class.forName(driver);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 连接数据库, 返回 Connection</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> DriverManager.getConnection(url, user, password);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 关闭相关资源， 如果需要关闭资源就传入对象，否则为 NULL</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">(ResultSet set, Statement statement, Connection connection)</span>&#123;<br>        <span class="hljs-comment">// 判断是否为空</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span>(set != <span class="hljs-literal">null</span>)&#123;<br>                set.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(statement != <span class="hljs-literal">null</span>)&#123;<br>                statement.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(connection != <span class="hljs-literal">null</span>)&#123;<br>                statement.close();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JDBC工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Druids文档</title>
      <link href="/article/2039cc48/"/>
      <url>/article/2039cc48/</url>
      
        <content type="html"><![CDATA[<h1 id="Druids连接池"><a href="#Druids连接池" class="headerlink" title="Druids连接池"></a>Druids连接池</h1><h2 id="Druids配置文件"><a href="#Druids配置文件" class="headerlink" title="Druids配置文件"></a>Druids配置文件</h2><p>druid.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">driverClassName</span> = <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/数据库名?useUnicode=true&amp;characterEncoding=utf8</span><br><span class="hljs-attr">username</span>=<span class="hljs-string">username</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">password</span><br><span class="hljs-attr">initialSize</span> = <span class="hljs-string">10</span><br><span class="hljs-attr">maxActive</span> = <span class="hljs-string">30</span><br><span class="hljs-attr">maxWait</span> = <span class="hljs-string">3000</span><br></code></pre></td></tr></table></figure><h2 id="德鲁伊（Druids）工具类"><a href="#德鲁伊（Druids）工具类" class="headerlink" title="德鲁伊（Druids）工具类"></a>德鲁伊（Druids）工具类</h2><p>德鲁伊工具类将德鲁伊连接池的常用方法进行封装，使用时直接导入即可，无序重复多次写，提高代码复用性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dutils</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> DataSource dataSource;<br><br>    <span class="hljs-comment">// 静态代码块完成dataSource初始化</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;src\\druid.properties&quot;</span>));<br>            dataSource = DruidDataSourceFactory.createDataSource(properties);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 编写 getConnection 方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> dataSource.getConnection();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 关闭连接</span><br>    <span class="hljs-comment">// 在连接池技术中，close不是真的断掉连接，而是将使用Connection 对象放回连接池</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">(ResultSet resultSet , Statement statement, Connection connection)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span>(resultSet != <span class="hljs-literal">null</span>)&#123;<br>                resultSet.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span> (statement != <span class="hljs-literal">null</span>)&#123;<br>                statement.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(connection != <span class="hljs-literal">null</span>)&#123;<br>                connection.close();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Druids工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL文档</title>
      <link href="/article/c88f20d/"/>
      <url>/article/c88f20d/</url>
      
        <content type="html"><![CDATA[<h1 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h1><h2 id="sql通用语法"><a href="#sql通用语法" class="headerlink" title="sql通用语法"></a>sql通用语法</h2><ol><li><p>SQL语句可以单行或多行书写，以分号结尾</p></li><li><p>SQL语句可以使用空格&#x2F;缩进来增强语句可读性</p></li><li><p>MySQL数据库的SQL语句不区分大小写，但关键字建议大写</p></li><li><p>注释：</p><ul><li>单行注释：-- 注释内容 或 # 注释内容（Mysql特有）</li><li>多行注释：&#x2F;* 注释内容*&#x2F;</li></ul></li></ol><h2 id="sql语句分类"><a href="#sql语句分类" class="headerlink" title="sql语句分类"></a>sql语句分类</h2><table><thead><tr><th align="center">分类</th><th align="center">全称</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">DDL</td><td align="center">Data Definition Language</td><td align="center">数据定义语言，用来定义数据库对象（数据库， 表， 字段）</td></tr><tr><td align="center">DML</td><td align="center">Data Maniulation Language</td><td align="center">数据操作语言，用来对数据库表中的数据进行增删改</td></tr><tr><td align="center">DQL</td><td align="center">Data Query Language</td><td align="center">数据查询语言，用来查询数据库表中的记录</td></tr><tr><td align="center">DCL</td><td align="center">Data Control Language</td><td align="center">数据控制语言，用来创建用户，控制数据库访问权限</td></tr></tbody></table><h2 id="SQL数据分类"><a href="#SQL数据分类" class="headerlink" title="SQL数据分类"></a>SQL数据分类</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">有符号（SIGEND）范围</th><th align="left">无符号（UNSIGEND）范围</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left">TINYINT</td><td align="left">1 byte</td><td align="left">(-128, 127)</td><td align="left">(0, 255)</td><td align="center">小整数值</td></tr><tr><td align="left">SMALLINT</td><td align="left">2 bytes</td><td align="left">(-32 768, 32 767)</td><td align="left">(0, 65 535)</td><td align="center">大整数值</td></tr><tr><td align="left">MEDIUMINT</td><td align="left">3 bytes</td><td align="left">(-8 388 608, 8 388 607)</td><td align="left">(0, 16 777 215)</td><td align="center">大整数值</td></tr><tr><td align="left">INT 或 INTEGER</td><td align="left">4 bytes</td><td align="left">(-2 147 483 648, 2 147 483 647)</td><td align="left">(0, 4 294 967 295)</td><td align="center">大整数值</td></tr><tr><td align="left">BIGINT</td><td align="left">8 bytes</td><td align="left">($-2^{63}$ , $2^{63} - 1$ )</td><td align="left">(0, $2^{64} - 1$)</td><td align="center">极大整数值</td></tr><tr><td align="left">FLOAT</td><td align="left">6 bytes</td><td align="left">(-3.402 823 466 E + 38, 3.402 823 466 351 E + 38)</td><td align="left">0 和 (1.175 494 351 E -38, 3.02 823 466 E + 308)</td><td align="center">单精度浮点数值</td></tr><tr><td align="left">DOUBLE</td><td align="left">8 bytes</td><td align="left">(-1.7976931348623157 E + 308, 1.7976931348623157 E + 308)</td><td align="left">0 和 (2.2 250 738 585 072 014 E - 308, 1.796 931 348 623 157 E + 308)</td><td align="center">双精度浮点数值</td></tr><tr><td align="left">DECIMAL</td><td align="left"></td><td align="left">依赖于M（精度）和D（标度）的值</td><td align="left">依赖于M（精度）和D（标度）的值</td><td align="center">小数值（精确定点数）</td></tr></tbody></table><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><table><thead><tr><th>类型</th><th>大小</th><th>描述</th></tr></thead><tbody><tr><td>CHAR</td><td>0 ~ 255 bytes</td><td>定长字符串</td></tr><tr><td>VARCHAR</td><td>0 ~ 65 535 bytes</td><td>变长字符串</td></tr><tr><td>TINYBLOB</td><td>0 ~ 255 bytes</td><td>不超过255个字符的二进制数据</td></tr><tr><td>TINYTEXT</td><td>0 ~ 255 bytes</td><td>短文本字符串</td></tr><tr><td>BLOB</td><td>0 ~ 65 535 bytes</td><td>二进制形式长文本数据</td></tr><tr><td>TEXT</td><td>0 ~ 65 535 bytes</td><td>长文本数据</td></tr><tr><td>MEDIUMBLOB</td><td>0 ~ 16 777 215 bytes</td><td>二进制形式的中等长度文本数据</td></tr><tr><td>MEDIUMTEXT</td><td>0 ~ 16 777  215 bytes</td><td>中等长度文本数据</td></tr><tr><td>LONGBLOB</td><td>0 - 4294 967 295 bytes</td><td>二进制形式的极大文本数据</td></tr><tr><td>LONGTEXT</td><td>0 ~ 4294 967 295 bytes</td><td>极大文本数据</td></tr></tbody></table><h3 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h3><table><thead><tr><th>类型</th><th align="center">大小</th><th>范围</th><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>DATE</td><td align="center">3</td><td>1000-01-01 至 9999-12-31</td><td>YYYY-MM-DD</td><td>日期值</td></tr><tr><td>TIME</td><td align="center">3</td><td>- 838 : 59 : 59 至 838 : 59 : 59</td><td>HH : MM : SS</td><td>时间值或持续时间</td></tr><tr><td>YEAR</td><td align="center">1</td><td>1901 至 2155</td><td>YYYY</td><td>年份值</td></tr><tr><td>DATETIME</td><td align="center">8</td><td>1000 - 01 - 01 00 : 00 : 01 至 9999 - 12 - 31 23 : 59 : 59</td><td>YYYY -MM - DD HH : MM : SS</td><td>混合日期和时间值</td></tr><tr><td>DATETIME</td><td align="center">4</td><td>1970 - 01 - 01 00 : 00 : 01 至 2038 - 01 - 19 03 ： 14 ： 07</td><td>YYYY - MM - DD HH : MM : SS</td><td>混合日期和时间值</td></tr></tbody></table><h2 id="DDL-——-数据定义语言"><a href="#DDL-——-数据定义语言" class="headerlink" title="DDL —— 数据定义语言"></a>DDL —— 数据定义语言</h2><p>DDL英文全称是Data Definition Language(数据定义语言)，负责数据结构定义与数据库对象定义</p><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>查询所有数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> DATABASES;<br></code></pre></td></tr></table></figure><p>查询当前数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> DATABASES;<br></code></pre></td></tr></table></figure><p>查询当前数据库所有表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> TABLES;<br></code></pre></td></tr></table></figure><p>查询表结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DESC</span> 表名;<br></code></pre></td></tr></table></figure><p>查询指定表的建表语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名;<br></code></pre></td></tr></table></figure><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>创建数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> DATABASE [IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>] 数据库名 [<span class="hljs-keyword">DEFAULT</span> CHARSET 字符集][<span class="hljs-keyword">COLLATE</span> 排序规则];<br></code></pre></td></tr></table></figure><p>创建数据库表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名(<br>字段<span class="hljs-number">1</span> 字段<span class="hljs-number">1</span>类型[COMMeNT 字段<span class="hljs-number">1</span>注解],<br>字段<span class="hljs-number">2</span> 字段<span class="hljs-number">2</span>类型[COMMeNT 字段<span class="hljs-number">2</span>注解],<br>    字段<span class="hljs-number">3</span> 字段<span class="hljs-number">3</span>类型[COMMeNT 字段<span class="hljs-number">3</span>注解],<br>    ......<br>    字段n 字段n类型[COMMeNT 字段n注解],<br>)[COMMRNT 表注解];<br></code></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>删除数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> DATABASES [IF <span class="hljs-keyword">EXISTS</span>] 数据库名;<br></code></pre></td></tr></table></figure><p>删除表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span>[IF <span class="hljs-keyword">EXISTS</span>] 表名;<br></code></pre></td></tr></table></figure><p>删除指定表，并重新弄创建该表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">TRUNCATE</span> <span class="hljs-keyword">TABLE</span> 表名;<br></code></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>使用数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL">USE 数据库名;<br></code></pre></td></tr></table></figure><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><p>添加表中字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> 表名 <span class="hljs-keyword">ADD</span> 字段名 类型(长度) [COMMENT 注释][约束]<br></code></pre></td></tr></table></figure><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>修改表中数据类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 MODIFY 字段名 新数据类型(长度);<br></code></pre></td></tr></table></figure><p>修改表中字段名和数据类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释][约束];<br></code></pre></td></tr></table></figure><p>修改表名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 RENAME <span class="hljs-keyword">TO</span> 新表名；<br></code></pre></td></tr></table></figure><h3 id="DDL总结"><a href="#DDL总结" class="headerlink" title="DDL总结"></a>DDL总结</h3><p>数据库操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> DATABASES;<br><span class="hljs-keyword">CREATE</span> DATABASE 数据库名;<br>USE 数据库名;<br><span class="hljs-keyword">SELECT</span> DATABASES();<br><span class="hljs-keyword">DROP</span> DATABASE 数据库名;<br></code></pre></td></tr></table></figure><p>表操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> TABLES;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名(字段 字段类型, 字段 字段类型)<br><span class="hljs-keyword">DESC</span> 表名;<br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">ADD</span><span class="hljs-operator">/</span> MODIFY<span class="hljs-operator">/</span> CHANGE<span class="hljs-operator">/</span> <span class="hljs-keyword">DROP</span><span class="hljs-operator">/</span> RENAME TO...;<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> 表名;<br></code></pre></td></tr></table></figure><h2 id="DML-——-数据操作语言"><a href="#DML-——-数据操作语言" class="headerlink" title="DML —— 数据操作语言"></a>DML —— 数据操作语言</h2><p>DML英文全称是DATA Mainpulation Languague(数据操作语言)，用来对数据库表中表的诗句记录进行增删改操作</p><h3 id="数据添加"><a href="#数据添加" class="headerlink" title="数据添加"></a>数据添加</h3><p>给指定字段添加数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 表名(字段名<span class="hljs-number">1</span>， 字段名<span class="hljs-number">2</span>, ... ) <span class="hljs-keyword">VALUES</span>(值<span class="hljs-number">1</span>， 值<span class="hljs-number">2</span>, ...);<br></code></pre></td></tr></table></figure><p>给全部字段添加数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 表名 <span class="hljs-keyword">VALUES</span>(值<span class="hljs-number">1</span>, 值<span class="hljs-number">2</span>, ...);<br></code></pre></td></tr></table></figure><p>批量添加数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 表名(字段名<span class="hljs-number">1</span>， 字段名<span class="hljs-number">2</span>，...) <span class="hljs-keyword">VALUES</span>(值<span class="hljs-number">1</span>， 值<span class="hljs-number">2</span>, ...), (值<span class="hljs-number">1</span>， 值<span class="hljs-number">2</span>, ...),...(值<span class="hljs-number">1</span>， 值<span class="hljs-number">2</span>, ...);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 表名 <span class="hljs-keyword">VALUES</span> (值<span class="hljs-number">1</span>， 值<span class="hljs-number">2.</span>..)，(值<span class="hljs-number">1</span>， 值<span class="hljs-number">2.</span>..),...(值<span class="hljs-number">1</span>， 值<span class="hljs-number">2.</span>..);<br></code></pre></td></tr></table></figure><p><strong>注意：</strong> </p><ul><li>插入数据时，指定的字段顺序需要于值的顺序一一对应</li><li>字符串和日期型数据应包含在引号里</li><li>插入的数据大小，应该在字段的规定范围内</li></ul><h3 id="数据修改"><a href="#数据修改" class="headerlink" title="数据修改"></a>数据修改</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> 表名 <span class="hljs-keyword">SET</span> 字段名<span class="hljs-number">1</span> <span class="hljs-operator">=</span> 值<span class="hljs-number">1</span>， 字段名<span class="hljs-number">2</span> <span class="hljs-operator">=</span> 值<span class="hljs-number">2</span>，...[<span class="hljs-keyword">WHERE</span> 条件];<br></code></pre></td></tr></table></figure><p><strong>注意：</strong> </p><ul><li>UPDATE语句条件可以有也可以没有，如果没有条件，则会修改整张表的所有数据</li></ul><h3 id="数据删除"><a href="#数据删除" class="headerlink" title="数据删除"></a>数据删除</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> 表名 [<span class="hljs-keyword">WHERE</span> 条件];<br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li><p>DELETE语句条件可以有也可以没有，如果没有条件，则会删除整张表的所有数据</p></li><li><p>DELETE语句不能删除某一个字段的值（可以使用UPDATE）</p></li></ul><h3 id="DML总结"><a href="#DML总结" class="headerlink" title="DML总结"></a>DML总结</h3><p>添加数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 表名(字段名<span class="hljs-number">1</span>， 字段名<span class="hljs-number">2</span>，...) <span class="hljs-keyword">VALUES</span>(值<span class="hljs-number">1</span>， 值<span class="hljs-number">2</span>, ...), (值<span class="hljs-number">1</span>， 值<span class="hljs-number">2</span>, ...),...(值<span class="hljs-number">1</span>， 值<span class="hljs-number">2</span>, ...);<br></code></pre></td></tr></table></figure><p>修改数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> 表名 <span class="hljs-keyword">SET</span> 字段名<span class="hljs-number">1</span> <span class="hljs-operator">=</span> 值<span class="hljs-number">1</span>， 字段名<span class="hljs-number">2</span> <span class="hljs-operator">=</span> 值<span class="hljs-number">2</span>，...[<span class="hljs-keyword">WHERE</span> 条件];<br></code></pre></td></tr></table></figure><p>删除数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> 表名 [<span class="hljs-keyword">WHERE</span> 条件];<br></code></pre></td></tr></table></figure><h2 id="DQL-——-数据查询语言"><a href="#DQL-——-数据查询语言" class="headerlink" title="DQL —— 数据查询语言"></a>DQL —— 数据查询语言</h2><p>DML英文全称是DATA Mainpulation Languague(数据查询语言)，用来查询数据库中表的记录</p><h3 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h3><p>查询多个字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 字段<span class="hljs-number">1</span>, 字段<span class="hljs-number">2</span>, ... <span class="hljs-keyword">FROM</span> 表名;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 表名;<br></code></pre></td></tr></table></figure><p>设置别名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 字段<span class="hljs-number">1</span> [<span class="hljs-keyword">AS</span> 别名<span class="hljs-number">1</span>], 字段<span class="hljs-number">2</span> [<span class="hljs-keyword">AS</span> 别名<span class="hljs-number">2</span>], ... <span class="hljs-keyword">FROM</span> 表名;<br></code></pre></td></tr></table></figure><p>去除重复记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表名;<br></code></pre></td></tr></table></figure><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">WHERE</span> 条件列表;<br></code></pre></td></tr></table></figure><p><strong>条件：</strong></p><table><thead><tr><th>比较运算符</th><th>功能</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于等于</td></tr><tr><td>&#x3D;</td><td>等于</td></tr><tr><td>&lt;&gt;  或  !&#x3D;</td><td>不等于</td></tr><tr><td>BERWEEN … AND …</td><td>在某个范围之内（含最大、最小值）</td></tr><tr><td>IN(…)</td><td>在 in 之后的列表中的值， 多选一</td></tr><tr><td>LIKE 占位符</td><td>模糊匹配（ _ 匹配单个字符， % 匹配任意个字符）</td></tr><tr><td>IS NULL</td><td>是NULL</td></tr></tbody></table><table><thead><tr><th>逻辑运算符</th><th>功能</th></tr></thead><tbody><tr><td>AND 或 &amp;&amp;</td><td>并且（多个条件同时成立）</td></tr><tr><td>OR 或 ||</td><td>或者（多个条件任意一个成立）</td></tr><tr><td>NOT 或 ！</td><td>非，不是</td></tr></tbody></table><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><p><strong>聚合函数</strong></p><p>将一系列数据作为整体，进行纵向运算</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>count</td><td>统计数量</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>avg</td><td>平均值</td></tr><tr><td>sum</td><td>求和</td></tr></tbody></table><p>语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 聚合函数(字段列表) <span class="hljs-keyword">FROM</span> 表名 [<span class="hljs-keyword">WHERE</span> 条件];<br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li><font color = red><strong>NULL值</strong></font>不参与聚合函数运算</li></ul><p>分组数据查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表名 [<span class="hljs-keyword">WHERE</span> 条件] <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> 分组字段名 [<span class="hljs-keyword">HAVING</span> 分组后过滤条件];<br></code></pre></td></tr></table></figure><blockquote><p>WHERE 和 HAVING 的区别：</p><p>​执行时机不同：where是分组之前进行过滤，不满足where条件则不参与分组；而having是分组之后对数据进行过滤</p><p>​判断条件不同：where不能对聚合函数进行判断，而having可以</p><p>执行顺序：WHERE &gt; 聚合函数 &gt; HAVING</p><p>分组之后，查询字段一般为聚合函数和分组字段，查询其他字段无任何意义</p></blockquote><h3 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h3><p>数据排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> 字段<span class="hljs-number">1</span> 排序方式<span class="hljs-number">1</span>, 字段<span class="hljs-number">2</span>, 排序方式<span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li><p>如果是多字段排序，只有第一个字段相同时，才会根据第二个字段进行排序</p></li><li><p>ASC代表升序</p></li><li><p>DESC代表降序</p></li></ul><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表名 LIMT 起始索引, 查询记录数;<br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>起始索引从 0 开始， <font color = red> <strong>起始索引 &#x3D; ( 查询页码 - 1) *  每页显示记录数</strong> </font></li><li>分页查询是数据库的方言，不同数据库有不同的实现，MySQL是 <code>LIMT</code></li><li>如果查询的是第一页数据，起始索引可以省略，直接简写为 Limit 10</li></ul><h3 id="DQL语句编写和执行顺序"><a href="#DQL语句编写和执行顺序" class="headerlink" title="DQL语句编写和执行顺序"></a>DQL语句编写和执行顺序</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-number">4</span><span class="hljs-keyword">FROM</span><br>字段列表表名列表<br><span class="hljs-keyword">FROM</span><span class="hljs-number">1</span><span class="hljs-keyword">WHERE</span><br>表名列表条件列表<br><span class="hljs-keyword">WHERE</span><span class="hljs-number">2</span><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>条件列表分组字段列表<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><span class="hljs-number">3</span><span class="hljs-keyword">HAVING</span><br>分组字段列表   分组后字段列表<br><span class="hljs-keyword">HAVING</span><span class="hljs-keyword">SELECT</span><br>分组后条件列表          字段列表<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><span class="hljs-number">5</span><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>排序字段列表   排序字段列表<br>LIMIT<span class="hljs-number">6</span>LIMIT<br>分页参数 分页参数<br></code></pre></td></tr></table></figure><h3 id="DQL总结"><a href="#DQL总结" class="headerlink" title="DQL总结"></a>DQL总结</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <br>字段列表  <span class="hljs-comment">-------&gt;字段名 [AS] 别名</span><br><span class="hljs-keyword">FROM</span><br>表名列表<br><span class="hljs-keyword">WHERE</span><br>条件列表<span class="hljs-comment">-------&gt;&gt;、 &gt;=、&lt;、&lt;=、&lt;&gt;、 like、 between and in、 and、 or</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>分组字段列表<br><span class="hljs-keyword">HAVING</span><br>分组后条件列表<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>排序字段列表   <span class="hljs-comment">-------&gt;   升序ASC， 降序DESC</span><br>LIMIT<br>分页参数<span class="hljs-comment">-------&gt; 起始索引（从0开始）， 每页展示记录数</span><br></code></pre></td></tr></table></figure><h2 id="DCL-——-数据控制语言"><a href="#DCL-——-数据控制语言" class="headerlink" title="DCL —— 数据控制语言"></a>DCL —— 数据控制语言</h2><p>DCL英文全称是DML英文全称是DATA Mainpulation Languague(数据查询语言)，用来管理数据库、用户、控制数据库的访问权限</p><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><p>1、查询用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">USE mysql;<br>SELECT * FROM user；<br></code></pre></td></tr></table></figure><p>2、创建用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;密码&#x27;</span>;<br></code></pre></td></tr></table></figure><p>3、修改用户密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER USER &#x27;用户名&#x27;@&#x27;主机名&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;新密码&#x27;<br></code></pre></td></tr></table></figure><p>4、删除用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机名&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h3><ol><li>查询权限</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SHOW</span> GRANTS <span class="hljs-keyword">FOR</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机名&#x27;</span>;<br></code></pre></td></tr></table></figure><ol start="2"><li>授予权限</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">GRANT</span> 权限列表 <span class="hljs-keyword">ON</span> 数据库名.表名 <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机名&#x27;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>撤销权限</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL">REMOVE 权限列表 <span class="hljs-keyword">ON</span> 数据库名.表名 <span class="hljs-keyword">FROM</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机名&#x27;</span>;<br></code></pre></td></tr></table></figure><p><strong>MySQL常用权限：</strong></p><table><thead><tr><th>权限</th><th>说明</th></tr></thead><tbody><tr><td>ALL、ALL PRIVILEGES</td><td>所有权限</td></tr><tr><td>SELECT</td><td>查询数据</td></tr><tr><td>INSERT</td><td>插入数据</td></tr><tr><td>UPDATE</td><td>修改数据</td></tr><tr><td>DELTTE</td><td>删除数据</td></tr><tr><td>ALTER</td><td>修改表</td></tr><tr><td>DROP</td><td>删除数据库&#x2F;表&#x2F;视图</td></tr><tr><td>CREATE</td><td>创建数据库表</td></tr></tbody></table><p><strong>注意：</strong></p><ul><li>多个权限之间，使用逗号分隔</li><li>授权时，数据库名和表名可以用 * 进行分配，代表所有</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><font color = red><strong>函数</strong></font>是指一段可以被直接被另一段程序调用的代码</p><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>COUNT (S1, S1, … $S_{n}$)</td><td>字符串拼接，将S1, S2, … $S_{n}$ 拼接成一个字符串</td></tr><tr><td>LOWER (str)</td><td>将字符串 str 全部转为 小写</td></tr><tr><td>UPPER (str)</td><td>将字符串 str 全部转为 大写</td></tr><tr><td>LPAD (str, n, pad)</td><td>左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</td></tr><tr><td>RPAD（str, n, pad）</td><td>右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</td></tr><tr><td>TRM（str）</td><td>去掉字符串头部和尾部的空格</td></tr><tr><td>SUBSTRING（str, start, len）</td><td>去掉字符串str位置起的len个长度的字符串</td></tr></tbody></table><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CEIL(x)</td><td>向上取整</td></tr><tr><td>FLOOR(x)</td><td>向下取整</td></tr><tr><td>MOD(x, y)</td><td>返回 x &#x2F; y 的模</td></tr><tr><td>RAND()</td><td>返回 0 ~ 1之内的随机数</td></tr><tr><td>ROUND(x, y)</td><td>求参数 x 的四舍五入的值，保留 y 位小数</td></tr></tbody></table><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CURDATE()</td><td>返回当前日期</td></tr><tr><td>CURTIME()</td><td>返回当前时间</td></tr><tr><td>NOW()</td><td>返回当前日期和时间</td></tr><tr><td>YEAR(date)</td><td>获取指定 date 的年份</td></tr><tr><td>MONIH(date)</td><td>获取指定 date 的月份</td></tr><tr><td>DAY(date)</td><td>获取指定 date 的日期</td></tr><tr><td>DATE_ADD(date, INTERVAL expr type)</td><td>返回一个日期&#x2F;时间值加上一个时间间隔 expr 的时间值</td></tr><tr><td>DATEDIFF(date1, date1)</td><td>返回起始时间 date1 和 结束时间 date2 之间的天数</td></tr></tbody></table><h3 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h3><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>IF(value, t ,f)</td><td>如果 value 值为true则返回 t ，否则返回 f</td></tr><tr><td>IFNULL(value1， value2)</td><td>如果 value1不为空，则返回value1，否则value2</td></tr><tr><td>CASE WHEN [vall] THEN [res1] … ELSE [default] END</td><td>如果 expr 的值为 true, 返回 res1, … 否则返回 default 默认值</td></tr><tr><td>CASE [expr] WHEN [vall] THEN [res1] … ELSE [default] END</td><td>如果 expr 的值等于 vall ，返回 res1, … 否则返回 default 默认值</td></tr></tbody></table><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>约束是作用于表中字段上的规则，用于限制存储在表中的数据，保证数据库中数据的正确性，有效性和完整性</p><table><thead><tr><th align="left">约束</th><th>描述</th><th>关键字</th></tr></thead><tbody><tr><td align="left">非空约束</td><td>限制该字段的数据不能为<font color = red><strong>NULL</strong></font></td><td><font color = red>NOT NULL</font></td></tr><tr><td align="left">唯一约束</td><td>保证该字段的所有数据都是唯一、不充分的</td><td><font color = red>UNIQUE</font></td></tr><tr><td align="left">主键约束</td><td>主键是一行数据的唯一标识，要求非空且唯一</td><td><font color = red>PRIMARY KEY</font></td></tr><tr><td align="left">默认约束</td><td>保存数据时，如果未指定该字段的值，则采用默认值</td><td><font color = red>DEFAULT</font></td></tr><tr><td align="left">检查约束（8.0.16版本之后）</td><td>保证字段值满足某一条件</td><td><font color = red>CHECK</font></td></tr><tr><td align="left">外键约束</td><td>用来让两张表的数据之间建立连接，保证数据的一致性和完整性</td><td><font color = red>FOREIGN  KEY</font></td></tr></tbody></table><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>外键用来让两张表的数据之间建立连接，从而保证数据的一致性和完整性</p><p>添加外键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名(<br>字段名 数据类型<br>    ......<br>    [<span class="hljs-keyword">CONSTRAINT</span>] [外键名称] <span class="hljs-keyword">FOREIGN</span> KEY(外键字段名) <span class="hljs-keyword">REFERENCES</span> 主表(主表列名)<br>);<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> 外键名称 <span class="hljs-keyword">FOREIGN</span> KEY(外键字段名) <span class="hljs-keyword">REFERENCES</span> 主表(主表列名)<br></code></pre></td></tr></table></figure><p>删除外键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">FOREIGN</span> KEY 外键名称;<br></code></pre></td></tr></table></figure><p>外键删除更新行为</p><table><thead><tr><th>行为</th><th>说明</th></tr></thead><tbody><tr><td>NO ACTION</td><td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有，则不允许删除&#x2F;更新（与RESTRICT）一致</td></tr><tr><td>RESTRICT</td><td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有，则不允许删除&#x2F;更新（与NO ACTION一致）</td></tr><tr><td>CASTRICT</td><td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有，则也删除&#x2F;更新外键在子表中的记录</td></tr><tr><td>SET NULL</td><td>当在父表中删除对应记录时，首先检查该记录是否有对应外键，如果有，则设置子表中该外键值为<font color = red>NULL</font>（要求该外键允许使用null）</td></tr><tr><td>SET DEFAULT</td><td>父表有变更时，子表将设置外阿健列成一个默认值（lnnodb不支持）</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> 外键名称 <span class="hljs-keyword">FOREIGN</span> KEY (外键字段) <span class="hljs-keyword">REFERENCES</span> 主表名(主表字段名) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> 行为 <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> 行为;<br></code></pre></td></tr></table></figure><h2 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h2><ol><li><p>由于业务之间相互练习，各个表之间也存在着各种联系，分为<font color = red><strong>一对多</strong></font>、<font color = red><strong>多对多</strong></font>和<font color = red><strong>一对一</strong></font></p><ul><li><p>一对多：在多的一方建立外键，指向一的一方的主键</p></li><li><p>多对多：建立第三方表，中间表至少包含两个外键，分别关联两方主键</p></li><li><p>一对一：在任意一方加入外键，关联另一方的主键，并设置外键为唯一<font color = red><strong>UNIQUE</strong></font></p></li></ul></li></ol><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><ol><li>指从多张表中查询数据</li><li>笛卡尔积是指在数学中，两个集合的所有组合情况（<font color = red>在多表查询时，需要消除无效的笛卡尔积</font>）</li></ol><blockquote><p>多表查询分类</p><ul><li>连接查询<ul><li>内连接：相当于查询表A, B交集部分数据</li><li>外连接：<ul><li>左外连接：查询<font color = red>左表</font>数据，以及两张表交集部分数据</li><li>右外连接：查询<font color = red>右表</font>数据</li></ul></li></ul></li><li>子查询</li></ul></blockquote><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><p>隐式内连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表<span class="hljs-number">1</span>， 表<span class="hljs-number">2</span> <span class="hljs-keyword">WHERE</span> 条件 ...;<br></code></pre></td></tr></table></figure><p>显式内连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表<span class="hljs-number">1</span> [<span class="hljs-keyword">INNER</span>] <span class="hljs-keyword">JOIN</span> 表<span class="hljs-number">2</span> <span class="hljs-keyword">ON</span> 连接条件 ...;<br></code></pre></td></tr></table></figure><h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><p>左外连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表<span class="hljs-number">1</span> <span class="hljs-keyword">LEFT</span> [<span class="hljs-keyword">OUTER</span>] <span class="hljs-keyword">JOIN</span> 表<span class="hljs-number">2</span> <span class="hljs-keyword">ON</span> 条件 ...;<br></code></pre></td></tr></table></figure><p>右外连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表<span class="hljs-number">1</span> <span class="hljs-keyword">RIGHT</span> [<span class="hljs-keyword">OUTER</span>] <span class="hljs-keyword">JOIN</span> 表<span class="hljs-number">2</span> <span class="hljs-keyword">ON</span> 条件 ...;<br></code></pre></td></tr></table></figure><p>自连接(<font color = red>自连接查询，可以是内连接，也可以是外联结</font>)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表A 别名A <span class="hljs-keyword">JOIN</span> 表A 别名B <span class="hljs-keyword">ON</span> 条件 ...;<br></code></pre></td></tr></table></figure><h3 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h3><p>对于union查询，就是把多次查询的结果合并起来，形成一个新的查询结果集</p><p>对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致</p><p>union all 会将全部的数据直接合并在一起，union 会对合并后的数据去重</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表A...<br><span class="hljs-keyword">UNION</span>[<span class="hljs-keyword">ALL</span>]<br><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表B...;<br></code></pre></td></tr></table></figure><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><ol><li>SQL语句中嵌套SELECT语句，称为<font color = red>嵌套查询</font>,又称<font color = red>子查询</font><br> 子查询外部的语句可以是<font color = red>INSERT &#x2F; UPDATE &#x2F;SELECT</font> 的任何一个</li><li>根据子查询结构不同，分为：<ul><li>标量子查询（子查询结果为单个值）</li><li>列子查询（子查询结果为一列）</li><li>行子查询（子查询结果为一行）</li><li>表子查询（子查询结果为多行多列）</li></ul></li><li>根据子查询位置，分为：WHERE之后，FROM之后，SELECT之后</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t1 <span class="hljs-keyword">WHERE</span> count1 <span class="hljs-operator">=</span> (<span class="hljs-keyword">SELECT</span> column1 FTOM t2);<br></code></pre></td></tr></table></figure><ul><li><p>标量子查询<br>  子查询返回结果值为单个值（数字、字符串、日期等最简单形式）<br>  常用操作符：&#x3D;、&lt;&gt;、&gt;、&gt;&#x3D;、&lt;、&lt;&#x3D;</p></li><li><p>列子查询<br>  子查询结果返回的是一列（可以是多行）<br>  常用操作符：IN、NOT IN、ANY、SOME、ALL</p></li><li><p>行子查询<br>  子查询返回的结果是一行（可以是多列）<br>  常用的操作符：&#x3D;、&lt;&gt;、IN、NOT IN</p></li><li><p>表子查询<br>  子查询返回结果是多行多列<br>  常用操作符：IN</p></li></ul><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>IN</td><td>在指定集合范围内，多选一</td></tr><tr><td>NOT IN</td><td>不在指定集合范围内</td></tr><tr><td>ANY</td><td>子查询返回列表中，有任意一个满足即可</td></tr><tr><td>SOME</td><td>与 ANY 等值，使用 SOME 的地方都可以使用 ANY</td></tr><tr><td>ALL</td><td>子查询返回列表必须都满足</td></tr></tbody></table><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务时一组操作的集合，是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作<font color = red>要么同时成功，要么同时失败</font></p><h3 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h3><ul><li><p>方式一，设置手动提交指令</p><ol><li><p>查看，设置事务提交方式</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> @<span class="hljs-variable">@autocommit</span>;<br><span class="hljs-keyword">SET</span> @<span class="hljs-variable">@autocommit</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure></li><li><p>提交事务</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">COMMIT</span>;<br></code></pre></td></tr></table></figure></li><li><p>回滚事务</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ROLLBACK</span>;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>方式二， 开启事务指令</p><ol><li><p>开启事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">START</span> TRANSACTION 或 <span class="hljs-keyword">BEGIN</span><br></code></pre></td></tr></table></figure></li><li><p>提交事务</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">COMMIT</span><br></code></pre></td></tr></table></figure></li><li><p>回滚事务</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ROLLBACK</span>;<br></code></pre></td></tr></table></figure></li></ol></li></ul><h3 id="事务四大特性"><a href="#事务四大特性" class="headerlink" title="事务四大特性"></a>事务四大特性</h3><ul><li>原子性：事务是不可分割的最小操作单元，要么全部成功，要么全部失败</li><li>一致性：事务完成时，必须使得所有的数据都保持一致状态</li><li>隔离性：数据库提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li><li>持久性：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</li></ul><h3 id="事务并发问题"><a href="#事务并发问题" class="headerlink" title="事务并发问题"></a>事务并发问题</h3><table><thead><tr><th>问题</th><th>描述</th></tr></thead><tbody><tr><td>脏读</td><td>一个事务读到另外一个事务还没有提交的数据</td></tr><tr><td>不可重复读</td><td>一个事务先后读取同一条事务，但两次读取的数据不同</td></tr><tr><td>幻读</td><td>一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据已经存在</td></tr></tbody></table><h3 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h3><table><thead><tr><th>隔离级别</th><th align="center">脏读</th><th align="center">不可重复读</th><th align="center">幻读</th></tr></thead><tbody><tr><td>Read uncommitted</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>Read committed</td><td align="center">$\times$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>Repeatable Read(默认)</td><td align="center">$\times$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>Serializable</td><td align="center">$\times$</td><td align="center">$\times$</td><td align="center">$\times$</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查看事务隔离级别</span><br><span class="hljs-keyword">SELECT</span> @<span class="hljs-variable">@TRANSACTION_ISOLATION</span>;<br><span class="hljs-comment">-- 设置事务隔离界别</span><br><span class="hljs-keyword">SET</span> [SESSION] TRANSACTION ISOLATION LEVEL &#123;READ UNCOMMITTED <span class="hljs-operator">|</span> READ COMMITTED <span class="hljs-operator">|</span> REPEATABLE READ <span class="hljs-operator">|</span> SERIALIZABLE&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文档 </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/article/e255a10a/"/>
      <url>/article/e255a10a/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-nbsp-计算机网络概述"><a href="#第一章-nbsp-计算机网络概述" class="headerlink" title="第一章 &nbsp; 计算机网络概述"></a>第一章 &nbsp; 计算机网络概述</h1><ol><li><p>计算机体系结构：计算机体系结构就是这个计算机网络及其部件所应完成的功能的精确定义。体系结构是抽象的，而显示则是具体的，是真正在运行的计算机硬件及软件。</p><BR></li><li><p>分组交换：计算机网络主要采用分组交换技术，主要思想为“见机行事，尽可能向前发送报文分组”。当信息量较大时可能会造成<font color = #6495ED><strong>网络拥塞</strong></font></p><BR></li><li><p>分组交换的主要优点 $\begin{cases}高效\灵活\迅速\可靠\end{cases}$</p><BR></li><li><p>计算机网络分类(范围从小到大)$\begin{cases}局域网&amp;&amp;LAN\城域网&amp;&amp;MAN\广域网&amp;&amp;WAN\个人区域网&amp;&amp;PAN \end{cases}$</p><BR></li><li><p>网络协议三要素：<font color = #6495ED ><strong>语法，语义，时序</strong></font></p><br></li><li><p>数据在各层之间的传输过程示意图：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy84MTgzMTcyLTZkYWU4OTdlNTc4MmQ0NDc?x-oss-process=image/format,png" alt="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy84MTgzMTcyLTZkYWU4OTdlNTc4MmQ0NDc?x-oss-process=image/format,png"></p><br></li><li><p>三种体系结构示意图 ：<br> <img src="https://imgconvert.csdnimg.cn/aHR0cDovL3BpYy5ybWIuYmRzdGF0aWMuY29tLzcwZjQwNmMwOTNlNmQzOWMyNzZjYTllYmI5N2Y5MmQ5LnBuZ0B3bV8yLHRfNTVtKzVhNjI1WSszTCtXM3B1YUNvQT09LGZjX2ZmZmZmZixmZl9VMmx0U0dWcCxzel80Nix4XzI5LHlfMjk?x-oss-process=image/format,png" alt="https://imgconvert.csdnimg.cn/aHR0cDovL3BpYy5ybWIuYmRzdGF0aWMuY29tLzcwZjQwNmMwOTNlNmQzOWMyNzZjYTllYmI5N2Y5MmQ5LnBuZ0B3bV8yLHRfNTVtKzVhNjI1WSszTCtXM3B1YUNvQT09LGZjX2ZmZmZmZixmZl9VMmx0U0dWcCxzel80Nix4XzI5LHlfMjk?x-oss-process=image/format,png"></p><br></li><li><p>五层协议各层功能:</p><blockquote><ul><li><font color = #6495ED>应用层</font>：负责实现网络应用；</li><li><font color = #6495ED>运输层</font>：负责主机中两个程序间的通讯；</li><li><font color = #6495ED>网络层</font>：负责传送IP地址，实现端到端的运输；</li><li><font color = #6495ED>数据链路层</font>：负责将资料组装成帧，并将其发往相邻节点；</li><li><font color = #6495ED>物理层</font>：负责在物理线路上传输信号；</li></ul></blockquote></li></ol><hr><h1 id="第二章-nbsp-物理层"><a href="#第二章-nbsp-物理层" class="headerlink" title="第二章 &nbsp; 物理层"></a>第二章 &nbsp; 物理层</h1><ol><li>信道复用技术$\begin{cases}频分复用&amp;&amp;FDM\时分复用&amp;&amp;TDM\码分复用&amp;&amp;CDM\end{cases}$<br></li><li>互联网接入技术$\begin{cases}电话网拨号接入\数字用户线接入\光纤同轴混合网接入\光纤接入\以太网接入\无线接入\end{cases}$<br></li></ol><hr><h1 id="第三章-nbsp-数据链路层"><a href="#第三章-nbsp-数据链路层" class="headerlink" title="第三章 &nbsp; 数据链路层"></a>第三章 &nbsp; 数据链路层</h1><ol><li>数据链路层三大基本任务：**<font color = #6495ED>封装成帧</font>，<font color = #6495ED>差错检测</font>, <font color = #6495ED>可靠传输</font>**<br></li><li><font color = #6495ED>CSMA&#x2F;CD协议名词解释 </font>：<blockquote><p>CSMA&#x2F;CD协议，即<font color = #6495ED>载波监听多址接入&#x2F;冲突避免</font>该协议在CSMA的基础上增加了一个<font color = #6495ED>冲突避免</font>功能，而没有实现冲突检测功能。由于不可能避免所有的冲突，且无线信道误码率较高，802.11标准还使用了数据链路层确认机制来保证数据被正确接收</p></blockquote></li></ol><br><hr><h1 id="第四章-nbsp-网络层"><a href="#第四章-nbsp-网络层" class="headerlink" title="第四章 &nbsp; 网络层"></a>第四章 &nbsp; 网络层</h1><ol><li><p>数据报服务不可靠且无连接，尽最大努力交付</p><br></li><li><p>虚电路网络是面向连接的可靠传输</p><br></li><li><p><font color = #6495ED>虚电路名词解释：</font><br>虚电路表示这只是一条逻辑上的连接，分组都沿着这条逻辑连接按照存储转发方式传送，而不是真正建立了一个物理连接。电路交换的电话通信时线建立了一条真正的连接。因此分组交换的虚连接和电路交换的连接只是类似，并不是完全一样</p><br></li><li><p><font color = #6495ED>数据报服务名词解释：</font><br>数据报服务是一种简单灵活的无连接的，尽最大努力交付的数据传输服务</p><br></li><li><p><font color =#FF0080>为什么网络选择数据报？</font></p><blockquote><ul><li>网络的灵活性：数据报服务允许不同大小和类型的数据包在网络上以不同的路径独立传输，这使得网络更加灵活，能够适应各种需求。</li><li>分布式路由：数据报服务允许每个数据包根据网络状态和目标地址自行选择最佳路由，而不需要预先建立连接或维护状态信息。这种分布式路由方式可以提高网络的效率和可靠性。</li><li>高效的多路复用：数据报服务可以支持多个数据包同时在网络上传输，并且这些数据包可以独立处理，从而在网络资源利用方面更加高效。</li><li>总的来说，数据报服务提供了一种灵活、高效和分布式的网络通信方式，适用于现代互联网中大量异构的设备和应用场景。</li></ul></blockquote></li></ol><br><ol start="6"><li><p>虚电路网络与数据报网络对比：</p><table><thead><tr><th align="center">对比方面</th><th align="center">虚电路网络</th><th align="center">数据报网络</th></tr></thead><tbody><tr><td align="center">思路</td><td align="center">可靠通信应当由网络来保证</td><td align="center">可靠通信应当由用户主机来保证</td></tr><tr><td align="center">连接的建立</td><td align="center">必须建立连接</td><td align="center">不需要建立连接</td></tr><tr><td align="center">终点地址</td><td align="center">仅在连接建立阶段使用，每个分组使用短的虚电路号</td><td align="center">每个分组都有终点的完整地址</td></tr><tr><td align="center">分组的转发</td><td align="center">属于同一条虚电路的分组均按照同一条路由进行转发</td><td align="center">每个分组独立选择路由进行转发</td></tr><tr><td align="center">当结点出现故障时</td><td align="center">所有通过出故障的结点在虚电路中均不能工作</td><td align="center">到达终点时不一定按照发送顺序</td></tr><tr><td align="center">服务质量保证</td><td align="center">可以将通信资源提前分配给每一个虚电路，因此较容易实现</td><td align="center">较难实现</td></tr><tr><td align="center"><br></td><td align="center"></td><td align="center"></td></tr></tbody></table></li><li><p><font color =#FF0080>两种技术的发展趋势是什么？</p><blockquote><p></font><br>数据报网络在互联网中取得了巨大的成功，但作为互联网底底层物理网络的很多广域分组交换网却都是虚电路网络；随着互联网多媒体应用需求的迅速增长，如何让网络提供更好的服务质量愈加重要，虚电路技术有受到了重视。故二者发展趋势为相互借鉴，相互融合，并行发展</p></blockquote></li></ol><br><ol start="8"><li>点分十进制：<img src="https://img-blog.csdnimg.cn/20200304175445145.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N5emRldg==,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200304175445145.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N5emRldg==,size_16,color_FFFFFF,t_70"></li></ol><br><ol start="9"><li><p>二级IP地址：</p><blockquote><p><strong><font color = #6495ED>IP地址 $\begin{matrix}::&#x3D;\end{matrix}\left { \left \langle 网络号 \right \rangle， \left \langle 主机号 \right \rangle   \right }$</font></strong></p></blockquote></li></ol><br><ol start="10"><li><p>IP地址中的网络号字段和主机号字段：<img src="https://www.biaodianfu.com/wp-content/uploads/2021/08/ip-class.png" alt="https://www.biaodianfu.com/wp-content/uploads/2021/08/ip-class.png"><br><br><img src="https://img-blog.csdnimg.cn/20200806145430497.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjA3NzU3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200806145430497.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjA3NzU3,size_16,color_FFFFFF,t_70"></p><br></li><li><p><c id='ip'> 三级IP地址：</p><blockquote><p><font color = #6495ED><strong>IP地址$\begin{matrix}::&#x3D;\end{matrix}\left { \left \langle 网络号 \right \rangle ，\left \langle 子网号 \right \rangle ，\left \langle 主机号 \right \rangle \right }$</strong></font></p></blockquote></li><li><p>无分类的二级编址：</p><blockquote><p><font color = #6495ED><strong>IP地址$\begin{matrix}::&#x3D;\end{matrix}\left { \left \langle 网络前缀 \right \rangle \left \langle 主机号 \right \rangle \right }$</strong></font></p></blockquote></li></ol><BR><ol start="13"><li><p><strong>IP地址计算和子网划分</strong>(还没写)</p><br></li><li><p>互联网三大路由协议：<strong>RIP, OSPF, BGP</strong></p><br></li><li><p><font color = #6495ED>最长前缀匹配名词解释：</font></p><blockquote><p>网络前缀越长，其地址块越小路由越具体，因而查找路由表时，应当从匹配结果中选择具有最长网络前缀的路由。最长网络匹配又称<font color = RED><strong>最长匹配</strong></font>或<font color = RED><strong>最佳匹配</strong></font><br><br></p></blockquote></li><li><p><font color = #6495ED>VPN名词解释：</font></p><blockquote><p>又称“虚拟专用网”，利用公用的互联网作为各个专用网之间的通信载体实现不同专用网之间的相互通信<br><br></p></blockquote></li><li><p><font color = #6495ED>NAT名词解释：</font></p><blockquote><p>又称“网络地址转换”，使大量内部专用地址的用户共享少量外部全球地址来访问互联网上的主机和资料。这种方法需要在专用网连接到互联网的路由器上运行NAT软件。运行NAT软件的路由器叫做NAT路由器，它至少有一个有效的外部全球地址$IP_{G}$。使所有使用本地地址的主机在和外界通信时都要在NAT路由器上将其本地地址转换成$IP_{G}$</p></blockquote></li></ol><br><ol start="18"><li>网络地址转换解决IP地址不足的问题<br></li><li><font color =#FF0080>子网掩码如何划分？</font><blockquote><p>从网络主机号中借用不定长的若干位作为子网号，主机号减少相应位数，两级IP地址变成了<a href="#ip">三级IP地址</a></p></blockquote></li></ol><br><ol start="20"><li><font color =#FF0080>地址块怎么写？</font><blockquote></blockquote></li></ol><hr><h1 id="第五章-nbsp-运输层"><a href="#第五章-nbsp-运输层" class="headerlink" title="第五章 &nbsp; 运输层"></a>第五章 &nbsp; 运输层</h1><ol><li><p>用户数据报协议 (UDP)<br>传输控制协议 (TCP)</p><br></li><li><p>UDP在数据传输之前<font color = #6495ED><strong>不需要建立连接</strong></font>.接收方正在受到UDP报文后，不需要做出任何确认。虽然UDP不提供可靠服务，但在某些情况下UDP是一种最有效的工作方式</p><br></li><li><p>TCP<font color = #6495ED><strong>提供面向连接的服务</strong></font>，在数据传输之前必须先建立连接数据传输结束后要释放连接。TCP不提供广播或多播服务。由于TCP要提供可靠的、面向连接的运输服务，因此增加了在许多开销，不仅使得运输协议数据单元的首部增大很多，还要占用许多处理器资源</p><br></li><li><p>端口是应用层与物理层之间接口的抽象，需要在运输层协议进行通信的进程，都需要与某个端口关联，端口号标志了应用进程所关联的端口，相当于应用进程的运输层地址。运输协议数据单元（即TCP报文段或UDP报文段）的首部必须包含两个字段<font color = RED><strong>源端口号</strong></font>和<font color = RED><strong>目的端口号</strong></font>.运输层收到IP层交上来的数据时，要根据其目的端口号来决定应当同过哪一个端口将其上交给目的的应用进程。</p><br></li><li><p>端口号值仅具有本地意义，不同的计算机中相同的端口号没有联系</p><br></li><li><p>端口号分类$\begin {cases}熟知端口号\登记端口号\动态端口号 \end{cases}$</p><br></li><li><p><font color = #6495ED><strong>熟知端口号</strong></font>数值为 <font color = RED><strong>0 ~ 1023</strong> </font>这类端口号有IANA负责分配给一些常用的应用层程序固定使用，一种新的应用程序出现时若要获得一个熟知端口号，必须想IANA申请</p><br></li><li><p><font color = #6495ED><strong>登记端口号</strong></font>数值为 <font color = RED><strong>1024 ~ 49151</strong></font> 这类端口号IANA不分配也不控制，但可以在IANA注册等级，防止重复使用</p><br></li><li><p><font color = #6495ED><strong>动态端口号</strong></font>数值为 <font color = RED><strong>49152 ~ 465535</strong></font> 这类端口号留给客户进程选座临时端口号，仅供临时使用，用完释放，可以给其他进程使用</p><br></li><li><p>TCP的连接建立采用客户 – 服务器的方式</p><br></li><li><p>TCP建立连接的三次握手分别为：<font color = #6495ED ><strong>连接请求、接受请求、发送确认</strong></font></p><br></li><li><p>三次握手示意图：<img src="https://img-blog.csdnimg.cn/6b7387af9a5d432d82cff543b1e519d0.png" alt="https://img-blog.csdnimg.cn/6b7387af9a5d432d82cff543b1e519d0.png"> </p><br></li><li><p>TCP释放连接的四次挥手分别为：<font color = #6495ED ><strong>释放请求、接受请求、回应请求、确认释放</strong></font></p><br></li><li><p>四次挥手示意图：<img src="https://pic1.zhimg.com/v2-3ac75609ec4f2bb895a44a2bbaafceef_r.jpg" alt="https://pic1.zhimg.com/v2-3ac75609ec4f2bb895a44a2bbaafceef_r.jpg"></p><br></li><li><p>TCP的有限状态机：<img src="https://ts1.cn.mm.bing.net/th/id/R-C.0c44b08974246ca3e5f517c0e3aad8de?rik=nJEsN2uJ80vMnQ&riu=http://www.uml.org.cn/sysML/images/2020042222.png.jpg&ehk=CUTVzFcsryZMkQNreLUHwyqEgKaEbaK7C4BXvPhLyN0=&risl=&pid=ImgRaw&r=0" alt="https://ts1.cn.mm.bing.net/th/id/R-C.0c44b08974246ca3e5f517c0e3aad8de?rik=nJEsN2uJ80vMnQ&amp;riu=http%3a%2f%2fwww.uml.org.cn%2fsysML%2fimages%2f2020042222.png.jpg&amp;ehk=CUTVzFcsryZMkQNreLUHwyqEgKaEbaK7C4BXvPhLyN0%3d&amp;risl=&amp;pid=ImgRaw&amp;r=0"></p><br></li><li><p>当网络中出现太多分组时，网络的性能开始下降，就会造成<font color = RED ><strong>拥塞</strong></font></p><br></li><li><p><font color = RED ><strong>拥塞控制</strong></font>就是防止过多的数据注入网络，使网络中的路由器或链路不致过载</p><br></li><li><p>拥塞控制可以分为<font color = RED><strong>开环控制</strong></font>和<font color = RED><strong>闭环控制</strong></font>两大类。开环控制方法试图从良好的设计来解决问题，它的本质是从一开始就要保证问题不会发生。一旦系统启动并运行就不需要中途去做修正。闭环控制是一种基于反馈环路的方法，包括三部分（1）检测网络系统以便检测到拥塞在何时，何地发生；（2）把拥塞发生的信息传送到可以采取行动的地方；（3）调整网络系统的运行以解决出现的问题</p><br></li><li><p>拥塞控制三种算法$\begin {cases}慢启动\拥塞避免\快速恢复 \end {cases}$</p><br></li><li><p>较好的防止网络拥塞的方法是通过试探发现网络的可用带宽，即<font color = #6495ED ><strong>由小到大增大发送方的拥塞窗口数值，直到发生拥塞</strong></font>通畅在刚刚开始发送报文段是可先将拥塞窗口设置为一个MSS[^1]数值。而在每收到一个<font color = #6495ED ><strong>对新的报文段的确认</strong></font>后，将拥塞窗口增加至多一个MSS数值。用这样的方法逐步增大发送方的拥塞窗口cwnd，可以使分组注入网络的速率更加合理，这就是<font color = RED ><strong>慢启动算法</strong></font><br>[^1]: RFC 2581规定在一开始cwnd应设置为不超过2 * MSS字节，并且在一开始不能超过两个报文段。为简化语法将cwnd设置为一个MSS</p></li></ol> <br><ol start="21"><li><p>慢启动阶段发送速率以质数方式增长，若发送速率持续以该速率增长，则网络必然很快进入拥塞状态。当网络接近拥塞时，应降低发送速率的增长速率。TCP定义了<font color = #6495ED ><strong>慢启动门限</strong></font>ssthresh（即从慢启动进入拥塞避免阶段的门限），超过慢启动阶段就进行拥塞避免</p><br></li><li><p>慢启动门限用法如下：</p><blockquote><pre><code>    当 cwnd &lt; ssthresh 时，使用慢启动算法；    当 cwnd = ssthresh 时，即可使用慢启动算法，也可使用拥塞避免算法    当 cwnd &gt; ssthresh 时，停止使用慢启动算法而改用拥塞避免算法</code></pre><p>&emsp;&emsp;每收到一个新的确认信息，将cwnd(以字节为单位)增加 $MSS \times (MSS; &#x2F; ; cwnd)$ 字节<br><br></p></blockquote></li><li><p>无论是慢启动阶段还是拥塞避免阶段，发送方只要发现网络出现故障（检测到分组丢失），就会立即将拥塞窗口的 <strong>cwnd</strong> 重新设置为1，并执行慢启动算法。同时将慢启动门限<font color = #6495ED ><strong>ssthresh</strong></font>设置为<font color = RED><strong>出现拥塞时的发送窗口大小</strong></font>（即接收方窗口和拥塞窗口中数值较小的一个）<font color = RED><strong>的一半</strong></font>（但不能小于2）</p><br></li><li><p>执行<font color = #6495ED ><strong>拥塞避免</strong></font>算法后，拥塞窗口呈线性增长，发送塑料布比较缓慢，以防网络过早出现拥塞，并使发送方可以长时间保持一个合理的发送速率。拥塞避免并不能避免拥塞，而是说把拥塞窗口控制为按线性规律增长，<font color = #6495ED ><strong>使网络不容易出现拥塞</strong></font></p><br></li><li><p>慢启动算法和拥塞避免算法的实现：<img src="https://i.loli.net/2019/07/23/5d36acc7595ca77662.png" alt="https://i.loli.net/2019/07/23/5d36acc7595ca77662.png"> </p><br></li><li><p>为解决发送方经过很长时间才能恢复正常的传输速率的问题 RFC 2581 定义了与快速重传配套使用的<font color = #6495ED ><strong>快速恢复</strong></font>算法，具体步骤如下：</p><blockquote><p>（1）发丝不过方收到连续三个重复的ACK后，就重新设置慢启动门限ssthresh，将其设置为当前发送窗口大小的一半。这点与慢启动算法相同<br>（2）与慢启动算法的不同之处时拥塞窗口的cwnd不是<strong>1</strong>，而是设置为新的慢启动门限ssthresh[^2]，然后开始执行拥塞避免算法，使拥塞窗口缓慢地线性增长<br><br></p></blockquote></li><li><p><strong>加性增和乘性减(AIMD)：</strong></p><blockquote><ul><li>经过慢启动发送方迅速进入拥塞避免状态，该阶段使拥塞窗口呈线性增长，发送速率缓慢增长，以防止网络过早出现拥塞。称为“<font color = #6495ED ><strong>加性增</strong></font>”</li><li>当流量逐渐超过网络可用宽带时会出现拥塞，但由于发送速率增长缓慢，通常仅导致少量分组丢失。这种情况下发送方会受到三个重复的ACK并将拥塞窗口减半，即<font color = #6495ED ><strong>乘性减</strong></font>，然后在继续执行“加性增”</li><li>在这种 “加性增，乘性减” 的拥塞控制下，发送方的平均发送速率始终保持在比较接近网络可用宽带的位置（慢启动门限之上）</li></ul></blockquote></li></ol><br><p>[^2]: 有的快速恢复实现是把拥塞窗口设置为：$ssthresh+ 3\times MSS$</p><ol start="28"><li>对接受到3个重复ACK和超时事件的不同处理：<img src="https://tse3-mm.cn.bing.net/th/id/OIP-C.l3YOmpY3OsHNlVV_sdyy1gHaDR?rs=1&pid=ImgDetMain" alt="https://tse3-mm.cn.bing.net/th/id/OIP-C.l3YOmpY3OsHNlVV_sdyy1gHaDR?rs=1&amp;pid=ImgDetMain"><br></li></ol><hr><h1 id="第六章-nbsp-应用层"><a href="#第六章-nbsp-应用层" class="headerlink" title="第六章 &nbsp; 应用层"></a>第六章 &nbsp; 应用层</h1><ol><li><p>万维网四大关键技术$\begin {cases}统一资源标识符&amp;&amp;URL\超文本传输协议&amp;&amp;HTTP\超文本标记语言&amp;&amp;HTML\搜索引擎 \end {cases}$</p><br></li><li><p><font color = #6495ED ><strong>C&#x2F;S体系结构名词解释</strong></font>：</p><blockquote><p>客户&#x2F;服务器体系协议结构包括一个总是运行着的服务器程序和许多有时运行的客户程序。客户进程是服务请求方，服务器进程是服务提供方。该体系结构的另一个特征为：服务器进程总是处于运行状态，并等待客户进程的服务请求。服务器进程具有固定的端口号，而运行服务器的主机也具有固定的IP地址</p></blockquote></li></ol><br><ol start="3"><li><p><font color = #6495ED ><strong>P2P体系结构名词解释</strong></font>：</p><blockquote><p> 对等体系结构中没有固定的服务请求者和服务提供者，分布在网络中的应用进程是对等的，被成为对等方（有时将运行对等方软件的计算机也成为对等方）。对等方相互直接通信，每个对等方<font color = RED ><strong>即是服务的请求这，又是服务的提供者</strong></font></p></blockquote></li></ol><br><ol start="4"><li>应用层协议定义了运行在不同端系统上的应用进程间为实现特定应用而相互通信的规则<blockquote><ul><li>交换报文的报文类型，入请求报文和相应报文</li><li>各种报文类型的语法，入报文中的各个字段及其详细描述</li><li>字段的语义，即包含在字段中的信息的含义</li><li>进程何时，如何发送报文及对报文进程相应的规则</li></ul></blockquote></li></ol><br><ol start="5"><li><p>域名系统实现计算机名到IP地址的转换，域名到<strong>IP</strong>地址的转换是由若干域名服务器程序完成的，<strong>IP</strong>地址的转换过程叫做<font color = #6495ED ><strong>域名解析</strong></font>。域名服务器程序在专设的主机上运行，运行该程序的主机成为<font color = #6495ED ><strong>域名服务器</strong></font></p><br></li><li><p>顶级域名(TLD)$\begin {cases}国家或地区顶级域名&amp;&amp;nTLD\通用顶级域名&amp;&amp;gTLD\反向域&amp;&amp;arpa \end {cases}$</p><blockquote><ul><li>国家或地区顶级域名采用 ISO 3166 的规定。例如，cn 表示中国， us表示美国<br></li><li>最常见的顶级通用域名有7个：com（公司企业）、net（网络服务机构）、org（非盈利性组织）、int（国际组合）、edu（教育机构）、gov（政府部门）、mil（军事部门）<br></li><li>反向域用于反向域名解析，将IP地址反向解析为域名</li></ul></blockquote></li></ol><br><ol start="7"><li>二级域名$\begin {cases}列别域名\\行政区域名 \end {cases}$<blockquote><ul><li>类别域名有7个：ac(科研机构)、com(工、商、金融等企业)、edu(教育机构)、 gov(政府部门)、net(提供网络服务的机构)、mil(军事机构)和org(非盈利性部门组织)<br>  </li><li>类别域名和顶级域名不要重复使用<br></li><li>行政区域名34个，使用与我国各省、自治区、直辖市。例如：bj 表示北京、sh 表示上海等。特别的tw（台湾）、hk（香港）为顶级域名</li></ul></blockquote></li></ol><br><ol start="8"><li><p>域名长度一般为四级，三级以后的域名由各单位自行划分，不在同一划分</p><br></li><li><p>互联网名字空间结构：<img src="https://imgconvert.csdnimg.cn/aHR0cDovL29zcy5vdWNobi5jbi96b25nYnVrZWNoZW5nZ2Fpei8xNjI3ODUvbW9kX3BhZ2UvY29udGVudC8xMy80LTQtMi5wbmc?x-oss-process=image/format,png" alt="https://imgconvert.csdnimg.cn/aHR0cDovL29zcy5vdWNobi5jbi96b25nYnVrZWNoZW5nZ2Fpei8xNjI3ODUvbW9kX3BhZ2UvY29udGVudC8xMy80LTQtMi5wbmc?x-oss-process=image/format,png"></p><br></li><li><p>域名服务器$\begin {cases}根域名服务器\顶级域名服务器\权威域名服务器 \end {cases}$<br><br>域名服务器解析域名本质是<font color = RED>查找映射表</font></p><br></li><li><p>DNS域名服务器的等级结构：<img src="https://note.youdao.com/yws/public/resource/1b080717be56529ad098c626d3450143/xmlnote/187107594E6A4AACB1584F755420A939/32605" alt="https://note.youdao.com/yws/public/resource/1b080717be56529ad098c626d3450143/xmlnote/187107594E6A4AACB1584F755420A939/32605"></p></li></ol><hr><h1 id="第七章-nbsp-网络安全"><a href="#第七章-nbsp-网络安全" class="headerlink" title="第七章 &nbsp; 网络安全"></a>第七章 &nbsp; 网络安全</h1><ol><li><p>安全威胁$\begin {cases} 被动攻击 \begin {cases}窃听\\流量分析 \end {cases}\\主动攻击：其他\end {cases}$</p><br></li><li><p>网络通信对应的四种攻击形式：</p><blockquote><ul><li>截断 (Interception)：攻击者从网络上窃听他人的通信内容</li><li>中断(Interruption): 攻击者有意中断他人在网络上的通信</li><li>篡改(Modification): 攻击这故意篡改网络上传送的报文</li><li>伪造(Fabrication): 攻击者伪造信息在网络上传送</li></ul></blockquote></li></ol><br><ol start="3"><li>恶意程序$\begin {cases}病毒&amp;非独立文件，需要依附于宿主\蠕虫&amp;独立文件\木马&amp;伪装应用\逻辑炸弹&amp;需要满足特殊条件 \end {cases}$<blockquote><p><font color = RED ><strong>计算机病毒</strong></font>是一种会传染其他程序的程序，通过修改其他程序把自身或其变种复制进去完成传染<br><br><br><font color = RED ><strong>计算机蠕虫</strong></font>是一种通过网络的通信功能主动将自身从一个结点发送到另一个结点并启动的程序<br><br><br> <font color = RED ><strong>特洛伊木马</strong></font>是一种在便面功能掩护下执行非授权功能的程序<br> <br><br> <font color = RED ><strong>逻辑炸弹</strong></font>是一种当运行环境满足某种特定条件时执行其他功能的程序</p></blockquote></li></ol><br><ol start="4"><li>安全服务$\begin {cases}机密性&amp;Confidentiality\报文完整性&amp;Message;Integrity\不可否认性&amp;Nonrepudiation\实体鉴别&amp;Entity;Authentication\访问控制&amp;Access;Contril\可用性&amp;Availability \end {cases}$<blockquote><p> <font color =  GREEN  ><strong>机密性(Confidentiality)</strong></font>：确保计算机系统中的信息或网络中传输的信息不会泄露给非授权用户<br> <br><br> <font color =  GREEN  ><strong>报文完整性(Message)</strong></font>：确保计算机系统中的信息或网络传输中的信息不被非授权用户篡改或伪造<br> <br><br> <font color =  GREEN  ><strong>不可否认性(Nonrepudiation)</strong></font>：防止发送方或接收方否认发送或接收过某信息<br> <br><br> <font color =  GREEN  ><strong>实体鉴别(Entity)</strong></font>：通信实体能够验证正在通信的对端实体的真是身份，确保不会与冒充者通信。与授权是不同的概念，授权设计的问题是：实体的行为是否被允许<br> <br><br> <font color =  GREEN  ><strong>访问控制(Access)</strong></font>：系统具有限制和控制不哦她那个实体对信息源或其他系统资源进行访问的能力。系统必须在鉴别实体身份的基础上对实体访问的权限进行控制<br> <br><br> <font color = GREEN ><strong>可用性(Availability)</strong></font>：确保授权用户能够正常访问系统或资源</p></blockquote></li></ol><br><ol start="5"><li><p><font color = #6495ED ><strong>对称密钥密码体制名词解释</strong></font>: </p><blockquote><p>对称密钥密码体制是一种加密密钥和解密密钥相同的密码体制，两个参与者共享同一个秘密密钥，如果用一个特定的密钥加密一套信息，就必须要用相同的密钥来解密该信息。该系统又称对称<font color = #6495ED ><strong>密钥系统</strong></font></p></blockquote></li></ol><br><ol start="6"><li><p><font color = #6495ED ><strong>公钥密码体制名词解释</strong></font>：</p><blockquote><ul><li>公钥密码体制使用不同的加密密钥与解密密钥，加密密钥（<font color = #6495ED ><strong>公钥</strong></font>）PK是公开信息，而解密密钥（<font color = #6495ED ><strong>私钥</strong></font>）SK是需要保密的。</li><li>私钥SK由公钥PK决定，但不能由PK算出SK</li></ul></blockquote></li><li><p>数字签名用于证明数据的出处和真实性，需保证以下三点：</p><blockquote><ul><li>接收方能够核实发送方对报文的数字签名</li><li>发送方事后不能抵赖对报文的数字签名</li><li>任何人包括接收方都不能伪造对报文的签名</li></ul></blockquote></li></ol><br><hr><h1 id="名词对照表"><a href="#名词对照表" class="headerlink" title=" 名词对照表"></a><font color = #8A2BE2> <strong>名词对照表</strong></font></h1><p>|:–:|:–|:–|:–|:–|:–|<br>|LAN|局域网|TDM|时分复用|CRC|循环冗余校验|<br>|MAN|城域网|CDM|码分复用|PPP|点对点协议|<br>|WAN|广域网|FDM|频分复用|CSMA&#x2F;CD|载波监听，多路访问&#x2F;冲突检测|<br>|PAN|个人区域网|WDM|波分复用|CSMA&#x2F;CA|载波监听，多路访问&#x2F;冲突避免|<br>|ICMP|网络控制报文协议|URL|统一资源标记定位符|VAT|虚拟地址转换|<br>|TCP|传输控制协议|SMTP|简单邮件传输协议|DOS|拒绝服务|<br>|UDP|用户数据报协议|ADSL|非对称数字用户线路|DDOS|分布式拒绝服务|<br>|HTTP|超文本传输协议|HFC|混合光纤同轴电缆|RTT|往返延时|<br>|HTML|超文本标记语言|VPN|虚拟专用网络|</p><br><h1 id="名词解释"><a href="#名词解释" class="headerlink" title="  名词解释"></a><font color = #8A2BE2>  <strong>名词解释</strong></font></h1><h2 id="CSMA-CA协议名词解释"><a href="#CSMA-CA协议名词解释" class="headerlink" title="CSMA&#x2F;CA协议名词解释 "></a><font color = #6495ED>CSMA&#x2F;CA协议名词解释 </font></h2><blockquote><p>CSMA&#x2F;CD协议，即<font color = #6495ED>载波监听多址接入&#x2F;冲突避免</font>该协议在CSMA的基础上增加了一个<font color = #6495ED>冲突避免</font>功能，而没有实现冲突检测功能。由于不可能避免所有的冲突，且无线信道误码率较高，802.11标准还使用了数据链路层确认机制来保证数据被正确接收</p></blockquote><h2 id="虚电路名词解释"><a href="#虚电路名词解释" class="headerlink" title="虚电路名词解释"></a><font color = #6495ED>虚电路名词解释</font></h2><blockquote><p>虚电路表示这只是一条逻辑上的连接，分组都沿着这条逻辑连接按照存储转发方式传送，而不是真正建立了一个物理连接。电路交换的电话通信时线建立了一条真正的连接。因此分组交换的虚连接和电路交换的连接只是类似，并不是完全一样</p></blockquote><h2 id="数据报服务名词解释"><a href="#数据报服务名词解释" class="headerlink" title="数据报服务名词解释"></a><font color = #6495ED>数据报服务名词解释</font></h2><blockquote><p>数据报服务是一种简单灵活的无连接的，尽最大努力交付的数据传输服务</p></blockquote><h2 id="最长前缀匹配名词解释"><a href="#最长前缀匹配名词解释" class="headerlink" title="最长前缀匹配名词解释"></a><font color = #6495ED>最长前缀匹配名词解释</font></h2><blockquote><p>网络前缀越长，其地址块越小路由越具体，因而查找路由表时，应当从匹配结果中选择具有最长网络前缀的路由。最长网络匹配又称<font color = RED><strong>最长匹配</strong></font>或<font color = RED><strong>最佳匹配</strong></font></p></blockquote><h2 id="VPN名词解释"><a href="#VPN名词解释" class="headerlink" title="VPN名词解释"></a><font color = #6495ED>VPN名词解释</font></h2><blockquote><p>又称“虚拟专用网”，利用公用的互联网作为各个专用网之间的通信载体实现不同专用网之间的相互通信</p></blockquote><h2 id="C-S体系结构名词解释"><a href="#C-S体系结构名词解释" class="headerlink" title="C&#x2F;S体系结构名词解释"></a><font color = #6495ED ><strong>C&#x2F;S体系结构名词解释</strong></font></h2><blockquote><p>客户&#x2F;服务器体系协议结构包括一个总是运行着的服务器程序和许多有时运行的客户程序。客户进程是服务请求方，服务器进程是服务提供方。该体系结构的另一个特征为：服务器进程总是处于运行状态，并等待客户进程的服务请求。服务器进程具有固定的端口号，而运行服务器的主机也具有固定的IP地址</p></blockquote><h2 id="P2P体系结构名词解释"><a href="#P2P体系结构名词解释" class="headerlink" title="P2P体系结构名词解释"></a><font color = #6495ED ><strong>P2P体系结构名词解释</strong></font></h2><blockquote><p>  对等体系结构中没有固定的服务请求者和服务提供者，分布在网络中的应用进程是对等的，被成为对等方（有时将运行对等方软件的计算机也成为对等方）。对等方相互直接通信，每个对等方<font color = RED ><strong>即是服务的请求者，又是服务的提供者</strong></font></p></blockquote><h2 id="NAT名词解释："><a href="#NAT名词解释：" class="headerlink" title="NAT名词解释："></a><font color = #6495ED>NAT名词解释：</font></h2><blockquote><p>又称“网络地址转换”，使大量内部专用地址的用户共享少量外部全球地址来访问互联网上的主机和资料。这种方法需要在专用网连接到互联网的路由器上运行NAT软件。运行NAT软件的路由器叫做NAT路由器，它至少有一个有效的外部全球地址$IP_{G}$。使所有使用本地地址的主机在和外界通信时都要在NAT路由器上将其本地地址转换成$IP_{G}$</p></blockquote><h2 id="对称密钥密码体制名词解释"><a href="#对称密钥密码体制名词解释" class="headerlink" title="对称密钥密码体制名词解释:"></a><font color = #6495ED ><strong>对称密钥密码体制名词解释</strong></font>:</h2><blockquote><p>对称密钥密码体制是一种加密密钥和解密密钥相同的密码体制，两个参与者共享同一个秘密密钥，如果用一个特定的密钥加密一套信息，就必须要用相同的密钥来解密该信息。该系统又称对称<font color = #6495ED ><strong>密钥系统</strong></font></p></blockquote><h2 id="公钥密码体制名词解释："><a href="#公钥密码体制名词解释：" class="headerlink" title="公钥密码体制名词解释："></a><font color = #6495ED ><strong>公钥密码体制名词解释</strong></font>：</h2><blockquote><ul><li>公钥密码体制使用不同的加密密钥与解密密钥，加密密钥（<font color = #6495ED ><strong>公钥</strong></font>）PK是公开信息，而解密密钥（<font color = #6495ED ><strong>私钥</strong></font>）SK是需要保密的。</li><li>私钥SK由公钥PK决定，但不能由PK算出SK</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> 期末 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown基本语法</title>
      <link href="/article/18136/"/>
      <url>/article/18136/</url>
      
        <content type="html"><![CDATA[<p><strong><center>MarkDown基本语法</center></strong></p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><p>……</p><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p><strong>粗体</strong><br><code>sudo doas</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">代码块<br></code></pre></td></tr></table></figure><p><a href="https://example.com/">链接文本</a><br><img src="https://gitee.com/favicon.ico" alt="图片说明"></p><ul><li><p>论点1<br>  1.打法</p><p>   wadnfniwajhf<br>  3.ad <a href="footnote">^2</a></p></li></ul><p><del>删除线</del><br>:joy:</p><ul><li>无序论点1</li><li>无序论点2</li><li>无序论点3<ul><li>无序子论点1</li><li>无需子论点2<ul><li>无序三级子论点<ul><li>无序四级子论点</li></ul></li></ul></li></ul></li></ul><ol><li>论点1</li><li>论点2<ol><li>有序子论点1</li><li>有序子论点2<ol><li>有参三级子论点<br>1.有序四级子论点</li></ol></li></ol></li></ol><pre><code>      </code></pre><p>表格：</p><table><thead><tr><th align="left">Column 1</th><th align="center">Column 2</th><th align="right">Column 3</th></tr></thead><tbody><tr><td align="left">centered 文本居左</td><td align="center">centered2 文本居中</td><td align="right">right-aligned 文本居右</td></tr><tr><td align="left">文本1</td><td align="center">文本2</td><td align="right">文本3</td></tr></tbody></table><p>特殊符号：<br>空白符：&nbsp;(一个  &amp;nbsp;  相当于一个空格)<br>换行符：<br>(一个 &lt;br&gt; 相当于一个回车)<br>$$x^{a}_{b}$$</p><p>[这是一段有注释的文字] [^1]<br>[^1]: 注释在这里</p>]]></content>
      
      
      
        <tags>
            
            <tag> 文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/article/16107/"/>
      <url>/article/16107/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络 - 传输层</title>
      <link href="/article/4210326288/"/>
      <url>/article/4210326288/</url>
      
        <content type="html"><![CDATA[<p>网络层只把分组发送到目的主机，但是真正通信的并不是主机而是主机中的进程。传输层提供了进程间的逻辑通信，传输层向高层用户屏蔽了下面网络层的核心细节，使应用程序看起来像是在两个传输层实体之间有一条端到端的逻辑通信信道。</p><h1 id="UDP-和-TCP-的特点"><a href="#UDP-和-TCP-的特点" class="headerlink" title="UDP 和 TCP 的特点"></a>UDP 和 TCP 的特点</h1><ul><li><p>用户数据报协议 UDP（User Datagram Protocol）是无连接的，尽最大可能交付，没有拥塞控制，面向报文（对于应用程序传下来的报文不合并也不拆分，只是添加 UDP 首部），支持一对一、一对多、多对一和多对多的交互通信。</p></li><li><p>传输控制协议 TCP（Transmission Control Protocol）是面向连接的，提供可靠交付，有流量控制，拥塞控制，提供全双工通信，面向字节流（把应用层传下来的报文看成字节流，把字节流组织成大小不等的数据块），每一条 TCP 连接只能是点对点的（一对一）。</p></li></ul><h1 id="UDP-首部格式"><a href="#UDP-首部格式" class="headerlink" title="UDP 首部格式"></a>UDP 首部格式</h1><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/d4c3a4a1-0846-46ec-9cc3-eaddfca71254.jpg"></p><p>首部字段只有 8 个字节，包括源端口、目的端口、长度、检验和。12 字节的伪首部是为了计算检验和临时添加的。</p><h1 id="TCP-首部格式"><a href="#TCP-首部格式" class="headerlink" title="TCP 首部格式"></a>TCP 首部格式</h1><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/55dc4e84-573d-4c13-a765-52ed1dd251f9.png"></p><ul><li><p><strong>序号</strong>   ：用于对字节流进行编号，例如序号为 301，表示第一个字节的编号为 301，如果携带的数据长度为 100 字节，那么下一个报文段的序号应为 401。</p></li><li><p><strong>确认号</strong>   ：期望收到的下一个报文段的序号。例如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此 B 期望下一个报文段的序号为 701，B 发送给 A 的确认报文段中确认号就为 701。</p></li><li><p><strong>数据偏移</strong>   ：指的是数据部分距离报文段起始处的偏移量，实际上指的是首部的长度。</p></li><li><p><strong>确认 ACK</strong>   ：当 ACK&#x3D;1 时确认号字段有效，否则无效。TCP 规定，在连接建立后所有传送的报文段都必须把 ACK 置 1。</p></li><li><p><strong>同步 SYN</strong>   ：在连接建立时用来同步序号。当 SYN&#x3D;1，ACK&#x3D;0 时表示这是一个连接请求报文段。若对方同意建立连接，则响应报文中 SYN&#x3D;1，ACK&#x3D;1。</p></li><li><p><strong>终止 FIN</strong>   ：用来释放一个连接，当 FIN&#x3D;1 时，表示此报文段的发送方的数据已发送完毕，并要求释放连接。</p></li><li><p><strong>窗口</strong>   ：窗口值作为接收方让发送方设置其发送窗口的依据。之所以要有这个限制，是因为接收方的数据缓存空间是有限的。</p></li></ul><h1 id="TCP-的三次握手"><a href="#TCP-的三次握手" class="headerlink" title="TCP 的三次握手"></a>TCP 的三次握手</h1><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/e92d0ebc-7d46-413b-aec1-34a39602f787.png"></p><p>假设 A 为客户端，B 为服务器端。</p><ul><li><p>首先 B 处于 LISTEN（监听）状态，等待客户的连接请求。</p></li><li><p>A 向 B 发送连接请求报文，SYN&#x3D;1，ACK&#x3D;0，选择一个初始的序号 x。</p></li><li><p>B 收到连接请求报文，如果同意建立连接，则向 A 发送连接确认报文，SYN&#x3D;1，ACK&#x3D;1，确认号为 x+1，同时也选择一个初始的序号 y。</p></li><li><p>A 收到 B 的连接确认报文后，还要向 B 发出确认，确认号为 y+1，序号为 x+1。</p></li><li><p>B 收到 A 的确认后，连接建立。</p></li></ul><p><strong>三次握手的原因</strong>  </p><p>第三次握手是为了防止失效的连接请求到达服务器，让服务器错误打开连接。</p><p>客户端发送的连接请求如果在网络中滞留，那么就会隔很长一段时间才能收到服务器端发回的连接确认。客户端等待一个超时重传时间之后，就会重新请求连接。但是这个滞留的连接请求最后还是会到达服务器，如果不进行三次握手，那么服务器就会打开两个连接。如果有第三次握手，客户端会忽略服务器之后发送的对滞留连接请求的连接确认，不进行第三次握手，因此就不会再次打开连接。</p><h1 id="TCP-的四次挥手"><a href="#TCP-的四次挥手" class="headerlink" title="TCP 的四次挥手"></a>TCP 的四次挥手</h1><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/f87afe72-c2df-4c12-ac03-9b8d581a8af8.jpg"></p><p>以下描述不讨论序号和确认号，因为序号和确认号的规则比较简单。并且不讨论 ACK，因为 ACK 在连接建立之后都为 1。</p><ul><li><p>A 发送连接释放报文，FIN&#x3D;1。</p></li><li><p>B 收到之后发出确认，此时 TCP 属于半关闭状态，B 能向 A 发送数据但是 A 不能向 B 发送数据。</p></li><li><p>当 B 不再需要连接时，发送连接释放报文，FIN&#x3D;1。</p></li><li><p>A 收到后发出确认，进入 TIME-WAIT 状态，等待 2 MSL（最大报文存活时间）后释放连接。</p></li><li><p>B 收到 A 的确认后释放连接。</p></li></ul><p><strong>四次挥手的原因</strong>  </p><p>客户端发送了 FIN 连接释放报文之后，服务器收到了这个报文，就进入了 CLOSE-WAIT 状态。这个状态是为了让服务器端发送还未传送完毕的数据，传送完毕之后，服务器会发送 FIN 连接释放报文。</p><p><strong>TIME_WAIT</strong>  </p><p>客户端接收到服务器端的 FIN 报文后进入此状态，此时并不是直接进入 CLOSED 状态，还需要等待一个时间计时器设置的时间 2MSL。这么做有两个理由：</p><ul><li><p>确保最后一个确认报文能够到达。如果 B 没收到 A 发送来的确认报文，那么就会重新发送连接释放请求报文，A 等待一段时间就是为了处理这种情况的发生。</p></li><li><p>等待一段时间是为了让本连接持续时间内所产生的所有报文都从网络中消失，使得下一个新的连接不会出现旧的连接请求报文。</p></li></ul><h1 id="TCP-可靠传输"><a href="#TCP-可靠传输" class="headerlink" title="TCP 可靠传输"></a>TCP 可靠传输</h1><p>TCP 使用超时重传来实现可靠传输：如果一个已经发送的报文段在超时时间内没有收到确认，那么就重传这个报文段。</p><p>一个报文段从发送再到接收到确认所经过的时间称为往返时间 RTT，加权平均往返时间 RTTs 计算如下：</p><div align="center"><img src="https://latex.codecogs.com/gif.latex?RTTs=(1-a)*(RTTs)+a*RTT" class="mathjax-pic"/></div> <br>其中，0 ≤ a ＜ 1，RTTs 随着 a 的增加更容易受到 RTT 的影响。<p>超时时间 RTO 应该略大于 RTTs，TCP 使用的超时时间计算如下：</p><div align="center"><img src="https://latex.codecogs.com/gif.latex?RTO=RTTs+4*RTT_d" class="mathjax-pic"/></div> <br>其中 RTT<sub>d</sub> 为偏差的加权平均值。<h1 id="TCP-滑动窗口"><a href="#TCP-滑动窗口" class="headerlink" title="TCP 滑动窗口"></a>TCP 滑动窗口</h1><p>窗口是缓存的一部分，用来暂时存放字节流。发送方和接收方各有一个窗口，接收方通过 TCP 报文段中的窗口字段告诉发送方自己的窗口大小，发送方根据这个值和其它信息设置自己的窗口大小。</p><p>发送窗口内的字节都允许被发送，接收窗口内的字节都允许被接收。如果发送窗口左部的字节已经发送并且收到了确认，那么就将发送窗口向右滑动一定距离，直到左部第一个字节不是已发送并且已确认的状态；接收窗口的滑动类似，接收窗口左部字节已经发送确认并交付主机，就向右滑动接收窗口。</p><p>接收窗口只会对窗口内最后一个按序到达的字节进行确认，例如接收窗口已经收到的字节为 {31, 34, 35}，其中 {31} 按序到达，而 {34, 35} 就不是，因此只对字节 31 进行确认。发送方得到一个字节的确认之后，就知道这个字节之前的所有字节都已经被接收。</p><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/a3253deb-8d21-40a1-aae4-7d178e4aa319.jpg"></p><h1 id="TCP-流量控制"><a href="#TCP-流量控制" class="headerlink" title="TCP 流量控制"></a>TCP 流量控制</h1><p>流量控制是为了控制发送方发送速率，保证接收方来得及接收。</p><p>接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。</p><h1 id="TCP-拥塞控制"><a href="#TCP-拥塞控制" class="headerlink" title="TCP 拥塞控制"></a>TCP 拥塞控制</h1><p>如果网络出现拥塞，分组将会丢失，此时发送方会继续重传，从而导致网络拥塞程度更高。因此当出现拥塞时，应当控制发送方的速率。这一点和流量控制很像，但是出发点不同。流量控制是为了让接收方能来得及接收，而拥塞控制是为了降低整个网络的拥塞程度。</p><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/51e2ed95-65b8-4ae9-8af3-65602d452a25.jpg"></p><p>TCP 主要通过四个算法来进行拥塞控制：慢开始、拥塞避免、快重传、快恢复。</p><p>发送方需要维护一个叫做拥塞窗口（cwnd）的状态变量，注意拥塞窗口与发送方窗口的区别：拥塞窗口只是一个状态变量，实际决定发送方能发送多少数据的是发送方窗口。</p><p>为了便于讨论，做如下假设：</p><ul><li>接收方有足够大的接收缓存，因此不会发生流量控制；</li><li>虽然 TCP 的窗口基于字节，但是这里设窗口的大小单位为报文段。</li></ul><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/910f613f-514f-4534-87dd-9b4699d59d31.png"></p><h2 id="1-慢开始与拥塞避免"><a href="#1-慢开始与拥塞避免" class="headerlink" title="1. 慢开始与拥塞避免"></a>1. 慢开始与拥塞避免</h2><p>发送的最初执行慢开始，令 cwnd &#x3D; 1，发送方只能发送 1 个报文段；当收到确认后，将 cwnd 加倍，因此之后发送方能够发送的报文段数量为：2、4、8 …</p><p>注意到慢开始每个轮次都将 cwnd 加倍，这样会让 cwnd 增长速度非常快，从而使得发送方发送的速度增长速度过快，网络拥塞的可能性也就更高。设置一个慢开始门限 ssthresh，当 cwnd &gt;&#x3D; ssthresh 时，进入拥塞避免，每个轮次只将 cwnd 加 1。</p><p>如果出现了超时，则令 ssthresh &#x3D; cwnd &#x2F; 2，然后重新执行慢开始。</p><h2 id="2-快重传与快恢复"><a href="#2-快重传与快恢复" class="headerlink" title="2. 快重传与快恢复"></a>2. 快重传与快恢复</h2><p>在接收方，要求每次接收到报文段都应该对最后一个已收到的有序报文段进行确认。例如已经接收到 M<sub>1</sub> 和 M<sub>2</sub>，此时收到 M<sub>4</sub>，应当发送对 M<sub>2</sub> 的确认。</p><p>在发送方，如果收到三个重复确认，那么可以知道下一个报文段丢失，此时执行快重传，立即重传下一个报文段。例如收到三个 M<sub>2</sub>，则 M<sub>3</sub> 丢失，立即重传 M<sub>3</sub>。</p><p>在这种情况下，只是丢失个别报文段，而不是网络拥塞。因此执行快恢复，令 ssthresh &#x3D; cwnd &#x2F; 2 ，cwnd &#x3D; ssthresh，注意到此时直接进入拥塞避免。</p><p>慢开始和快恢复的快慢指的是 cwnd 的设定值，而不是 cwnd 的增长速率。慢开始 cwnd 设定为 1，而快恢复 cwnd 设定为 ssthresh。</p><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/f61b5419-c94a-4df1-8d4d-aed9ae8cc6d5.png">  </p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li>计算机网络, 谢希仁</li><li>JamesF.Kurose, KeithW.Ross, 库罗斯, 等. 计算机网络: 自顶向下方法 [M]. 机械工业出版社, 2014.</li><li>W.RichardStevens. TCP&#x2F;IP 详解. 卷 1, 协议 [M]. 机械工业出版社, 2006.</li><li><a href="https://securitywing.com/active-vs-passive-ftp-mode/">Active vs Passive FTP Mode: Which One is More Secure?</a></li><li><a href="http://www.serv-u.com/kb/1138/active-and-passive-ftp-transfers-defined">Active and Passive FTP Transfers Defined - KB Article #1138</a></li><li><a href="https://zh.wikipedia.org/wiki/Traceroute">Traceroute</a></li><li><a href="https://zh.wikipedia.org/wiki/Ping">ping</a></li><li><a href="http://webcache.googleusercontent.com/search?q=cache:http://anandgiria.blogspot.com/2013/09/windows-dhcp-interview-questions-and.html">How DHCP works and DHCP Interview Questions and Answers</a></li><li><a href="https://www.quora.com/What-is-process-of-DORA-in-DHCP">What is process of DORA in DHCP?</a></li><li><a href="https://tecadmin.net/what-is-dhcp-server/">What is DHCP Server ?</a></li><li><a href="http://www.climatechangenews.com/2011/html/university-tokyo.html">Tackling emissions targets in Tokyo</a></li><li><a href="http://www.climatechangenews.com/2011/html/university-tokyo.html">What does my ISP know when I use Tor?</a></li><li><a href="http://www.linyibin.cn/2017/02/12/technology-ComputerNetworking-Internet/">Technology-Computer Networking[1]-Computer Networks and the Internet</a></li><li><a href="http://slidesplayer.com/slide/11616167/">P2P 网络概述.</a></li><li><a href="http://slideplayer.com/slide/5115386/">Circuit Switching (a) Circuit switching. (b) Packet switching.</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
